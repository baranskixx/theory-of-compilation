Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> <empty>
Rule 2     start -> keywords
Rule 3     keywords -> keyword
Rule 4     keywords -> keywords keyword
Rule 5     keyword -> keyword_if
Rule 6     keyword -> keyword_for
Rule 7     keyword -> keyword_while
Rule 8     keyword -> keyword_return ;
Rule 9     keyword -> keyword_assign ;
Rule 10    keyword -> keyword_print ;
Rule 11    keyword -> break ;
Rule 12    keyword -> continue ;
Rule 13    keyword -> { keywords }
Rule 14    keyword_if -> IF ( expr ) keyword
Rule 15    keyword_if -> IF ( expr ) keyword ELSE keyword
Rule 16    keyword_return -> RETURN
Rule 17    keyword_return -> RETURN expr
Rule 18    keyword_for -> FOR id = expr : expr keyword
Rule 19    keyword_while -> WHILE ( expr ) keyword
Rule 20    break -> BREAK
Rule 21    continue -> CONTINUE
Rule 22    str -> STRING
Rule 23    keyword_print -> PRINT printables
Rule 24    printables -> printable
Rule 25    printables -> printables , printable
Rule 26    printable -> expr
Rule 27    printable -> str
Rule 28    keyword_assign -> assignable = expr
Rule 29    keyword_assign -> assignable ADDASSIGN expr
Rule 30    keyword_assign -> assignable SUBASSIGN expr
Rule 31    keyword_assign -> assignable MULASSIGN expr
Rule 32    keyword_assign -> assignable DIVASSIGN expr
Rule 33    id -> ID
Rule 34    assignable -> id
Rule 35    assignable -> matrix_element
Rule 36    assignable -> vector_element
Rule 37    expr -> expr '
Rule 38    expr -> ( expr )
Rule 39    expr -> matrix_create ( expr )
Rule 40    expr -> - expr
Rule 41    expr -> assignable
Rule 42    expr -> matrix
Rule 43    expr -> INTNUM
Rule 44    expr -> FLOAT
Rule 45    expr -> expr + expr
Rule 46    expr -> expr - expr
Rule 47    expr -> expr * expr
Rule 48    expr -> expr / expr
Rule 49    expr -> expr DOTADD expr
Rule 50    expr -> expr DOTSUB expr
Rule 51    expr -> expr DOTMUL expr
Rule 52    expr -> expr DOTDIV expr
Rule 53    expr -> expr > expr
Rule 54    expr -> expr < expr
Rule 55    expr -> expr EQ expr
Rule 56    expr -> expr NEQ expr
Rule 57    expr -> expr LEQ expr
Rule 58    expr -> expr GEQ expr
Rule 59    matrix -> [ vectors ]
Rule 60    matrix_create -> ZEROS
Rule 61    matrix_create -> ONES
Rule 62    matrix_create -> EYE
Rule 63    matrix_element -> id [ INTNUM , INTNUM ]
Rule 64    vectors -> vectors , vector
Rule 65    vectors -> vector
Rule 66    vector -> [ variables ]
Rule 67    vector_element -> id [ INTNUM ]
Rule 68    variables -> variables , variable
Rule 69    variables -> variable
Rule 70    variable -> INTNUM
Rule 71    variable -> FLOAT
Rule 72    variable -> assignable

Terminals, with rules where they appear

'                    : 37
(                    : 14 15 19 38 39
)                    : 14 15 19 38 39
*                    : 47
+                    : 45
,                    : 25 63 64 68
-                    : 40 46
/                    : 48
:                    : 18
;                    : 8 9 10 11 12
<                    : 54
=                    : 18 28
>                    : 53
ADDASSIGN            : 29
BREAK                : 20
CONTINUE             : 21
DIVASSIGN            : 32
DOTADD               : 49
DOTDIV               : 52
DOTMUL               : 51
DOTSUB               : 50
ELSE                 : 15
EQ                   : 55
EYE                  : 62
FLOAT                : 44 71
FOR                  : 18
GEQ                  : 58
ID                   : 33
IF                   : 14 15
INTNUM               : 43 63 63 67 70
LEQ                  : 57
MULASSIGN            : 31
NEQ                  : 56
ONES                 : 61
PRINT                : 23
RETURN               : 16 17
STRING               : 22
SUBASSIGN            : 30
WHILE                : 19
ZEROS                : 60
[                    : 59 63 66 67
]                    : 59 63 66 67
error                : 
{                    : 13
}                    : 13

Nonterminals, with rules where they appear

assignable           : 28 29 30 31 32 41 72
break                : 11
continue             : 12
expr                 : 14 15 17 18 18 19 26 28 29 30 31 32 37 38 39 40 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58
id                   : 18 34 63 67
keyword              : 3 4 14 15 15 18 19
keyword_assign       : 9
keyword_for          : 6
keyword_if           : 5
keyword_print        : 10
keyword_return       : 8
keyword_while        : 7
keywords             : 2 4 13
matrix               : 42
matrix_create        : 39
matrix_element       : 35
printable            : 24 25
printables           : 23 25
start                : 0
str                  : 27
variable             : 68 69
variables            : 66 68
vector               : 64 65
vector_element       : 36
vectors              : 59 64

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> .
    (2) start -> . keywords
    (3) keywords -> . keyword
    (4) keywords -> . keywords keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    $end            reduce using rule 1 (start -> .)
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    start                          shift and go to state 1
    keywords                       shift and go to state 2
    keyword                        shift and go to state 3
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 1

    (0) S' -> start .



state 2

    (2) start -> keywords .
    (4) keywords -> keywords . keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    $end            reduce using rule 2 (start -> keywords .)
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keyword                        shift and go to state 25
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 3

    (3) keywords -> keyword .

    {               reduce using rule 3 (keywords -> keyword .)
    IF              reduce using rule 3 (keywords -> keyword .)
    FOR             reduce using rule 3 (keywords -> keyword .)
    WHILE           reduce using rule 3 (keywords -> keyword .)
    RETURN          reduce using rule 3 (keywords -> keyword .)
    PRINT           reduce using rule 3 (keywords -> keyword .)
    BREAK           reduce using rule 3 (keywords -> keyword .)
    CONTINUE        reduce using rule 3 (keywords -> keyword .)
    ID              reduce using rule 3 (keywords -> keyword .)
    $end            reduce using rule 3 (keywords -> keyword .)
    }               reduce using rule 3 (keywords -> keyword .)


state 4

    (5) keyword -> keyword_if .

    {               reduce using rule 5 (keyword -> keyword_if .)
    IF              reduce using rule 5 (keyword -> keyword_if .)
    FOR             reduce using rule 5 (keyword -> keyword_if .)
    WHILE           reduce using rule 5 (keyword -> keyword_if .)
    RETURN          reduce using rule 5 (keyword -> keyword_if .)
    PRINT           reduce using rule 5 (keyword -> keyword_if .)
    BREAK           reduce using rule 5 (keyword -> keyword_if .)
    CONTINUE        reduce using rule 5 (keyword -> keyword_if .)
    ID              reduce using rule 5 (keyword -> keyword_if .)
    $end            reduce using rule 5 (keyword -> keyword_if .)
    }               reduce using rule 5 (keyword -> keyword_if .)
    ELSE            reduce using rule 5 (keyword -> keyword_if .)


state 5

    (6) keyword -> keyword_for .

    {               reduce using rule 6 (keyword -> keyword_for .)
    IF              reduce using rule 6 (keyword -> keyword_for .)
    FOR             reduce using rule 6 (keyword -> keyword_for .)
    WHILE           reduce using rule 6 (keyword -> keyword_for .)
    RETURN          reduce using rule 6 (keyword -> keyword_for .)
    PRINT           reduce using rule 6 (keyword -> keyword_for .)
    BREAK           reduce using rule 6 (keyword -> keyword_for .)
    CONTINUE        reduce using rule 6 (keyword -> keyword_for .)
    ID              reduce using rule 6 (keyword -> keyword_for .)
    $end            reduce using rule 6 (keyword -> keyword_for .)
    }               reduce using rule 6 (keyword -> keyword_for .)
    ELSE            reduce using rule 6 (keyword -> keyword_for .)


state 6

    (7) keyword -> keyword_while .

    {               reduce using rule 7 (keyword -> keyword_while .)
    IF              reduce using rule 7 (keyword -> keyword_while .)
    FOR             reduce using rule 7 (keyword -> keyword_while .)
    WHILE           reduce using rule 7 (keyword -> keyword_while .)
    RETURN          reduce using rule 7 (keyword -> keyword_while .)
    PRINT           reduce using rule 7 (keyword -> keyword_while .)
    BREAK           reduce using rule 7 (keyword -> keyword_while .)
    CONTINUE        reduce using rule 7 (keyword -> keyword_while .)
    ID              reduce using rule 7 (keyword -> keyword_while .)
    $end            reduce using rule 7 (keyword -> keyword_while .)
    }               reduce using rule 7 (keyword -> keyword_while .)
    ELSE            reduce using rule 7 (keyword -> keyword_while .)


state 7

    (8) keyword -> keyword_return . ;

    ;               shift and go to state 26


state 8

    (9) keyword -> keyword_assign . ;

    ;               shift and go to state 27


state 9

    (10) keyword -> keyword_print . ;

    ;               shift and go to state 28


state 10

    (11) keyword -> break . ;

    ;               shift and go to state 29


state 11

    (12) keyword -> continue . ;

    ;               shift and go to state 30


state 12

    (13) keyword -> { . keywords }
    (3) keywords -> . keyword
    (4) keywords -> . keywords keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keywords                       shift and go to state 31
    keyword                        shift and go to state 3
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 13

    (14) keyword_if -> IF . ( expr ) keyword
    (15) keyword_if -> IF . ( expr ) keyword ELSE keyword

    (               shift and go to state 32


state 14

    (18) keyword_for -> FOR . id = expr : expr keyword
    (33) id -> . ID

    ID              shift and go to state 24

    id                             shift and go to state 33

state 15

    (34) assignable -> id .
    (63) matrix_element -> id . [ INTNUM , INTNUM ]
    (67) vector_element -> id . [ INTNUM ]

    =               reduce using rule 34 (assignable -> id .)
    ADDASSIGN       reduce using rule 34 (assignable -> id .)
    SUBASSIGN       reduce using rule 34 (assignable -> id .)
    MULASSIGN       reduce using rule 34 (assignable -> id .)
    DIVASSIGN       reduce using rule 34 (assignable -> id .)
    '               reduce using rule 34 (assignable -> id .)
    +               reduce using rule 34 (assignable -> id .)
    -               reduce using rule 34 (assignable -> id .)
    *               reduce using rule 34 (assignable -> id .)
    /               reduce using rule 34 (assignable -> id .)
    DOTADD          reduce using rule 34 (assignable -> id .)
    DOTSUB          reduce using rule 34 (assignable -> id .)
    DOTMUL          reduce using rule 34 (assignable -> id .)
    DOTDIV          reduce using rule 34 (assignable -> id .)
    >               reduce using rule 34 (assignable -> id .)
    <               reduce using rule 34 (assignable -> id .)
    EQ              reduce using rule 34 (assignable -> id .)
    NEQ             reduce using rule 34 (assignable -> id .)
    LEQ             reduce using rule 34 (assignable -> id .)
    GEQ             reduce using rule 34 (assignable -> id .)
    ;               reduce using rule 34 (assignable -> id .)
    ,               reduce using rule 34 (assignable -> id .)
    )               reduce using rule 34 (assignable -> id .)
    :               reduce using rule 34 (assignable -> id .)
    {               reduce using rule 34 (assignable -> id .)
    IF              reduce using rule 34 (assignable -> id .)
    FOR             reduce using rule 34 (assignable -> id .)
    WHILE           reduce using rule 34 (assignable -> id .)
    RETURN          reduce using rule 34 (assignable -> id .)
    PRINT           reduce using rule 34 (assignable -> id .)
    BREAK           reduce using rule 34 (assignable -> id .)
    CONTINUE        reduce using rule 34 (assignable -> id .)
    ID              reduce using rule 34 (assignable -> id .)
    ]               reduce using rule 34 (assignable -> id .)
    [               shift and go to state 34


state 16

    (19) keyword_while -> WHILE . ( expr ) keyword

    (               shift and go to state 35


state 17

    (16) keyword_return -> RETURN .
    (17) keyword_return -> RETURN . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    ;               reduce using rule 16 (keyword_return -> RETURN .)
    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 36
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 18

    (28) keyword_assign -> assignable . = expr
    (29) keyword_assign -> assignable . ADDASSIGN expr
    (30) keyword_assign -> assignable . SUBASSIGN expr
    (31) keyword_assign -> assignable . MULASSIGN expr
    (32) keyword_assign -> assignable . DIVASSIGN expr

    =               shift and go to state 48
    ADDASSIGN       shift and go to state 49
    SUBASSIGN       shift and go to state 50
    MULASSIGN       shift and go to state 51
    DIVASSIGN       shift and go to state 52


state 19

    (23) keyword_print -> PRINT . printables
    (24) printables -> . printable
    (25) printables -> . printables , printable
    (26) printable -> . expr
    (27) printable -> . str
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (22) str -> . STRING
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    STRING          shift and go to state 57
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    printables                     shift and go to state 53
    printable                      shift and go to state 54
    expr                           shift and go to state 55
    str                            shift and go to state 56
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 20

    (20) break -> BREAK .

    ;               reduce using rule 20 (break -> BREAK .)


state 21

    (21) continue -> CONTINUE .

    ;               reduce using rule 21 (continue -> CONTINUE .)


state 22

    (35) assignable -> matrix_element .

    =               reduce using rule 35 (assignable -> matrix_element .)
    ADDASSIGN       reduce using rule 35 (assignable -> matrix_element .)
    SUBASSIGN       reduce using rule 35 (assignable -> matrix_element .)
    MULASSIGN       reduce using rule 35 (assignable -> matrix_element .)
    DIVASSIGN       reduce using rule 35 (assignable -> matrix_element .)
    '               reduce using rule 35 (assignable -> matrix_element .)
    +               reduce using rule 35 (assignable -> matrix_element .)
    -               reduce using rule 35 (assignable -> matrix_element .)
    *               reduce using rule 35 (assignable -> matrix_element .)
    /               reduce using rule 35 (assignable -> matrix_element .)
    DOTADD          reduce using rule 35 (assignable -> matrix_element .)
    DOTSUB          reduce using rule 35 (assignable -> matrix_element .)
    DOTMUL          reduce using rule 35 (assignable -> matrix_element .)
    DOTDIV          reduce using rule 35 (assignable -> matrix_element .)
    >               reduce using rule 35 (assignable -> matrix_element .)
    <               reduce using rule 35 (assignable -> matrix_element .)
    EQ              reduce using rule 35 (assignable -> matrix_element .)
    NEQ             reduce using rule 35 (assignable -> matrix_element .)
    LEQ             reduce using rule 35 (assignable -> matrix_element .)
    GEQ             reduce using rule 35 (assignable -> matrix_element .)
    ;               reduce using rule 35 (assignable -> matrix_element .)
    ,               reduce using rule 35 (assignable -> matrix_element .)
    )               reduce using rule 35 (assignable -> matrix_element .)
    :               reduce using rule 35 (assignable -> matrix_element .)
    {               reduce using rule 35 (assignable -> matrix_element .)
    IF              reduce using rule 35 (assignable -> matrix_element .)
    FOR             reduce using rule 35 (assignable -> matrix_element .)
    WHILE           reduce using rule 35 (assignable -> matrix_element .)
    RETURN          reduce using rule 35 (assignable -> matrix_element .)
    PRINT           reduce using rule 35 (assignable -> matrix_element .)
    BREAK           reduce using rule 35 (assignable -> matrix_element .)
    CONTINUE        reduce using rule 35 (assignable -> matrix_element .)
    ID              reduce using rule 35 (assignable -> matrix_element .)
    ]               reduce using rule 35 (assignable -> matrix_element .)


state 23

    (36) assignable -> vector_element .

    =               reduce using rule 36 (assignable -> vector_element .)
    ADDASSIGN       reduce using rule 36 (assignable -> vector_element .)
    SUBASSIGN       reduce using rule 36 (assignable -> vector_element .)
    MULASSIGN       reduce using rule 36 (assignable -> vector_element .)
    DIVASSIGN       reduce using rule 36 (assignable -> vector_element .)
    '               reduce using rule 36 (assignable -> vector_element .)
    +               reduce using rule 36 (assignable -> vector_element .)
    -               reduce using rule 36 (assignable -> vector_element .)
    *               reduce using rule 36 (assignable -> vector_element .)
    /               reduce using rule 36 (assignable -> vector_element .)
    DOTADD          reduce using rule 36 (assignable -> vector_element .)
    DOTSUB          reduce using rule 36 (assignable -> vector_element .)
    DOTMUL          reduce using rule 36 (assignable -> vector_element .)
    DOTDIV          reduce using rule 36 (assignable -> vector_element .)
    >               reduce using rule 36 (assignable -> vector_element .)
    <               reduce using rule 36 (assignable -> vector_element .)
    EQ              reduce using rule 36 (assignable -> vector_element .)
    NEQ             reduce using rule 36 (assignable -> vector_element .)
    LEQ             reduce using rule 36 (assignable -> vector_element .)
    GEQ             reduce using rule 36 (assignable -> vector_element .)
    ;               reduce using rule 36 (assignable -> vector_element .)
    ,               reduce using rule 36 (assignable -> vector_element .)
    )               reduce using rule 36 (assignable -> vector_element .)
    :               reduce using rule 36 (assignable -> vector_element .)
    {               reduce using rule 36 (assignable -> vector_element .)
    IF              reduce using rule 36 (assignable -> vector_element .)
    FOR             reduce using rule 36 (assignable -> vector_element .)
    WHILE           reduce using rule 36 (assignable -> vector_element .)
    RETURN          reduce using rule 36 (assignable -> vector_element .)
    PRINT           reduce using rule 36 (assignable -> vector_element .)
    BREAK           reduce using rule 36 (assignable -> vector_element .)
    CONTINUE        reduce using rule 36 (assignable -> vector_element .)
    ID              reduce using rule 36 (assignable -> vector_element .)
    ]               reduce using rule 36 (assignable -> vector_element .)


state 24

    (33) id -> ID .

    [               reduce using rule 33 (id -> ID .)
    =               reduce using rule 33 (id -> ID .)
    ADDASSIGN       reduce using rule 33 (id -> ID .)
    SUBASSIGN       reduce using rule 33 (id -> ID .)
    MULASSIGN       reduce using rule 33 (id -> ID .)
    DIVASSIGN       reduce using rule 33 (id -> ID .)
    '               reduce using rule 33 (id -> ID .)
    +               reduce using rule 33 (id -> ID .)
    -               reduce using rule 33 (id -> ID .)
    *               reduce using rule 33 (id -> ID .)
    /               reduce using rule 33 (id -> ID .)
    DOTADD          reduce using rule 33 (id -> ID .)
    DOTSUB          reduce using rule 33 (id -> ID .)
    DOTMUL          reduce using rule 33 (id -> ID .)
    DOTDIV          reduce using rule 33 (id -> ID .)
    >               reduce using rule 33 (id -> ID .)
    <               reduce using rule 33 (id -> ID .)
    EQ              reduce using rule 33 (id -> ID .)
    NEQ             reduce using rule 33 (id -> ID .)
    LEQ             reduce using rule 33 (id -> ID .)
    GEQ             reduce using rule 33 (id -> ID .)
    ;               reduce using rule 33 (id -> ID .)
    ,               reduce using rule 33 (id -> ID .)
    )               reduce using rule 33 (id -> ID .)
    :               reduce using rule 33 (id -> ID .)
    {               reduce using rule 33 (id -> ID .)
    IF              reduce using rule 33 (id -> ID .)
    FOR             reduce using rule 33 (id -> ID .)
    WHILE           reduce using rule 33 (id -> ID .)
    RETURN          reduce using rule 33 (id -> ID .)
    PRINT           reduce using rule 33 (id -> ID .)
    BREAK           reduce using rule 33 (id -> ID .)
    CONTINUE        reduce using rule 33 (id -> ID .)
    ID              reduce using rule 33 (id -> ID .)
    ]               reduce using rule 33 (id -> ID .)


state 25

    (4) keywords -> keywords keyword .

    {               reduce using rule 4 (keywords -> keywords keyword .)
    IF              reduce using rule 4 (keywords -> keywords keyword .)
    FOR             reduce using rule 4 (keywords -> keywords keyword .)
    WHILE           reduce using rule 4 (keywords -> keywords keyword .)
    RETURN          reduce using rule 4 (keywords -> keywords keyword .)
    PRINT           reduce using rule 4 (keywords -> keywords keyword .)
    BREAK           reduce using rule 4 (keywords -> keywords keyword .)
    CONTINUE        reduce using rule 4 (keywords -> keywords keyword .)
    ID              reduce using rule 4 (keywords -> keywords keyword .)
    $end            reduce using rule 4 (keywords -> keywords keyword .)
    }               reduce using rule 4 (keywords -> keywords keyword .)


state 26

    (8) keyword -> keyword_return ; .

    {               reduce using rule 8 (keyword -> keyword_return ; .)
    IF              reduce using rule 8 (keyword -> keyword_return ; .)
    FOR             reduce using rule 8 (keyword -> keyword_return ; .)
    WHILE           reduce using rule 8 (keyword -> keyword_return ; .)
    RETURN          reduce using rule 8 (keyword -> keyword_return ; .)
    PRINT           reduce using rule 8 (keyword -> keyword_return ; .)
    BREAK           reduce using rule 8 (keyword -> keyword_return ; .)
    CONTINUE        reduce using rule 8 (keyword -> keyword_return ; .)
    ID              reduce using rule 8 (keyword -> keyword_return ; .)
    $end            reduce using rule 8 (keyword -> keyword_return ; .)
    }               reduce using rule 8 (keyword -> keyword_return ; .)
    ELSE            reduce using rule 8 (keyword -> keyword_return ; .)


state 27

    (9) keyword -> keyword_assign ; .

    {               reduce using rule 9 (keyword -> keyword_assign ; .)
    IF              reduce using rule 9 (keyword -> keyword_assign ; .)
    FOR             reduce using rule 9 (keyword -> keyword_assign ; .)
    WHILE           reduce using rule 9 (keyword -> keyword_assign ; .)
    RETURN          reduce using rule 9 (keyword -> keyword_assign ; .)
    PRINT           reduce using rule 9 (keyword -> keyword_assign ; .)
    BREAK           reduce using rule 9 (keyword -> keyword_assign ; .)
    CONTINUE        reduce using rule 9 (keyword -> keyword_assign ; .)
    ID              reduce using rule 9 (keyword -> keyword_assign ; .)
    $end            reduce using rule 9 (keyword -> keyword_assign ; .)
    }               reduce using rule 9 (keyword -> keyword_assign ; .)
    ELSE            reduce using rule 9 (keyword -> keyword_assign ; .)


state 28

    (10) keyword -> keyword_print ; .

    {               reduce using rule 10 (keyword -> keyword_print ; .)
    IF              reduce using rule 10 (keyword -> keyword_print ; .)
    FOR             reduce using rule 10 (keyword -> keyword_print ; .)
    WHILE           reduce using rule 10 (keyword -> keyword_print ; .)
    RETURN          reduce using rule 10 (keyword -> keyword_print ; .)
    PRINT           reduce using rule 10 (keyword -> keyword_print ; .)
    BREAK           reduce using rule 10 (keyword -> keyword_print ; .)
    CONTINUE        reduce using rule 10 (keyword -> keyword_print ; .)
    ID              reduce using rule 10 (keyword -> keyword_print ; .)
    $end            reduce using rule 10 (keyword -> keyword_print ; .)
    }               reduce using rule 10 (keyword -> keyword_print ; .)
    ELSE            reduce using rule 10 (keyword -> keyword_print ; .)


state 29

    (11) keyword -> break ; .

    {               reduce using rule 11 (keyword -> break ; .)
    IF              reduce using rule 11 (keyword -> break ; .)
    FOR             reduce using rule 11 (keyword -> break ; .)
    WHILE           reduce using rule 11 (keyword -> break ; .)
    RETURN          reduce using rule 11 (keyword -> break ; .)
    PRINT           reduce using rule 11 (keyword -> break ; .)
    BREAK           reduce using rule 11 (keyword -> break ; .)
    CONTINUE        reduce using rule 11 (keyword -> break ; .)
    ID              reduce using rule 11 (keyword -> break ; .)
    $end            reduce using rule 11 (keyword -> break ; .)
    }               reduce using rule 11 (keyword -> break ; .)
    ELSE            reduce using rule 11 (keyword -> break ; .)


state 30

    (12) keyword -> continue ; .

    {               reduce using rule 12 (keyword -> continue ; .)
    IF              reduce using rule 12 (keyword -> continue ; .)
    FOR             reduce using rule 12 (keyword -> continue ; .)
    WHILE           reduce using rule 12 (keyword -> continue ; .)
    RETURN          reduce using rule 12 (keyword -> continue ; .)
    PRINT           reduce using rule 12 (keyword -> continue ; .)
    BREAK           reduce using rule 12 (keyword -> continue ; .)
    CONTINUE        reduce using rule 12 (keyword -> continue ; .)
    ID              reduce using rule 12 (keyword -> continue ; .)
    $end            reduce using rule 12 (keyword -> continue ; .)
    }               reduce using rule 12 (keyword -> continue ; .)
    ELSE            reduce using rule 12 (keyword -> continue ; .)


state 31

    (13) keyword -> { keywords . }
    (4) keywords -> keywords . keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    }               shift and go to state 58
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keyword                        shift and go to state 25
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 32

    (14) keyword_if -> IF ( . expr ) keyword
    (15) keyword_if -> IF ( . expr ) keyword ELSE keyword
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 59
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 33

    (18) keyword_for -> FOR id . = expr : expr keyword

    =               shift and go to state 60


state 34

    (63) matrix_element -> id [ . INTNUM , INTNUM ]
    (67) vector_element -> id [ . INTNUM ]

    INTNUM          shift and go to state 61


state 35

    (19) keyword_while -> WHILE ( . expr ) keyword
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 62
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 36

    (17) keyword_return -> RETURN expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 17 (keyword_return -> RETURN expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 37

    (38) expr -> ( . expr )
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 78
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 38

    (39) expr -> matrix_create . ( expr )

    (               shift and go to state 79


state 39

    (40) expr -> - . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 80
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 40

    (41) expr -> assignable .

    '               reduce using rule 41 (expr -> assignable .)
    +               reduce using rule 41 (expr -> assignable .)
    -               reduce using rule 41 (expr -> assignable .)
    *               reduce using rule 41 (expr -> assignable .)
    /               reduce using rule 41 (expr -> assignable .)
    DOTADD          reduce using rule 41 (expr -> assignable .)
    DOTSUB          reduce using rule 41 (expr -> assignable .)
    DOTMUL          reduce using rule 41 (expr -> assignable .)
    DOTDIV          reduce using rule 41 (expr -> assignable .)
    >               reduce using rule 41 (expr -> assignable .)
    <               reduce using rule 41 (expr -> assignable .)
    EQ              reduce using rule 41 (expr -> assignable .)
    NEQ             reduce using rule 41 (expr -> assignable .)
    LEQ             reduce using rule 41 (expr -> assignable .)
    GEQ             reduce using rule 41 (expr -> assignable .)
    ;               reduce using rule 41 (expr -> assignable .)
    ,               reduce using rule 41 (expr -> assignable .)
    )               reduce using rule 41 (expr -> assignable .)
    :               reduce using rule 41 (expr -> assignable .)
    {               reduce using rule 41 (expr -> assignable .)
    IF              reduce using rule 41 (expr -> assignable .)
    FOR             reduce using rule 41 (expr -> assignable .)
    WHILE           reduce using rule 41 (expr -> assignable .)
    RETURN          reduce using rule 41 (expr -> assignable .)
    PRINT           reduce using rule 41 (expr -> assignable .)
    BREAK           reduce using rule 41 (expr -> assignable .)
    CONTINUE        reduce using rule 41 (expr -> assignable .)
    ID              reduce using rule 41 (expr -> assignable .)


state 41

    (42) expr -> matrix .

    '               reduce using rule 42 (expr -> matrix .)
    +               reduce using rule 42 (expr -> matrix .)
    -               reduce using rule 42 (expr -> matrix .)
    *               reduce using rule 42 (expr -> matrix .)
    /               reduce using rule 42 (expr -> matrix .)
    DOTADD          reduce using rule 42 (expr -> matrix .)
    DOTSUB          reduce using rule 42 (expr -> matrix .)
    DOTMUL          reduce using rule 42 (expr -> matrix .)
    DOTDIV          reduce using rule 42 (expr -> matrix .)
    >               reduce using rule 42 (expr -> matrix .)
    <               reduce using rule 42 (expr -> matrix .)
    EQ              reduce using rule 42 (expr -> matrix .)
    NEQ             reduce using rule 42 (expr -> matrix .)
    LEQ             reduce using rule 42 (expr -> matrix .)
    GEQ             reduce using rule 42 (expr -> matrix .)
    ;               reduce using rule 42 (expr -> matrix .)
    ,               reduce using rule 42 (expr -> matrix .)
    )               reduce using rule 42 (expr -> matrix .)
    :               reduce using rule 42 (expr -> matrix .)
    {               reduce using rule 42 (expr -> matrix .)
    IF              reduce using rule 42 (expr -> matrix .)
    FOR             reduce using rule 42 (expr -> matrix .)
    WHILE           reduce using rule 42 (expr -> matrix .)
    RETURN          reduce using rule 42 (expr -> matrix .)
    PRINT           reduce using rule 42 (expr -> matrix .)
    BREAK           reduce using rule 42 (expr -> matrix .)
    CONTINUE        reduce using rule 42 (expr -> matrix .)
    ID              reduce using rule 42 (expr -> matrix .)


state 42

    (43) expr -> INTNUM .

    '               reduce using rule 43 (expr -> INTNUM .)
    +               reduce using rule 43 (expr -> INTNUM .)
    -               reduce using rule 43 (expr -> INTNUM .)
    *               reduce using rule 43 (expr -> INTNUM .)
    /               reduce using rule 43 (expr -> INTNUM .)
    DOTADD          reduce using rule 43 (expr -> INTNUM .)
    DOTSUB          reduce using rule 43 (expr -> INTNUM .)
    DOTMUL          reduce using rule 43 (expr -> INTNUM .)
    DOTDIV          reduce using rule 43 (expr -> INTNUM .)
    >               reduce using rule 43 (expr -> INTNUM .)
    <               reduce using rule 43 (expr -> INTNUM .)
    EQ              reduce using rule 43 (expr -> INTNUM .)
    NEQ             reduce using rule 43 (expr -> INTNUM .)
    LEQ             reduce using rule 43 (expr -> INTNUM .)
    GEQ             reduce using rule 43 (expr -> INTNUM .)
    ;               reduce using rule 43 (expr -> INTNUM .)
    ,               reduce using rule 43 (expr -> INTNUM .)
    )               reduce using rule 43 (expr -> INTNUM .)
    :               reduce using rule 43 (expr -> INTNUM .)
    {               reduce using rule 43 (expr -> INTNUM .)
    IF              reduce using rule 43 (expr -> INTNUM .)
    FOR             reduce using rule 43 (expr -> INTNUM .)
    WHILE           reduce using rule 43 (expr -> INTNUM .)
    RETURN          reduce using rule 43 (expr -> INTNUM .)
    PRINT           reduce using rule 43 (expr -> INTNUM .)
    BREAK           reduce using rule 43 (expr -> INTNUM .)
    CONTINUE        reduce using rule 43 (expr -> INTNUM .)
    ID              reduce using rule 43 (expr -> INTNUM .)


state 43

    (44) expr -> FLOAT .

    '               reduce using rule 44 (expr -> FLOAT .)
    +               reduce using rule 44 (expr -> FLOAT .)
    -               reduce using rule 44 (expr -> FLOAT .)
    *               reduce using rule 44 (expr -> FLOAT .)
    /               reduce using rule 44 (expr -> FLOAT .)
    DOTADD          reduce using rule 44 (expr -> FLOAT .)
    DOTSUB          reduce using rule 44 (expr -> FLOAT .)
    DOTMUL          reduce using rule 44 (expr -> FLOAT .)
    DOTDIV          reduce using rule 44 (expr -> FLOAT .)
    >               reduce using rule 44 (expr -> FLOAT .)
    <               reduce using rule 44 (expr -> FLOAT .)
    EQ              reduce using rule 44 (expr -> FLOAT .)
    NEQ             reduce using rule 44 (expr -> FLOAT .)
    LEQ             reduce using rule 44 (expr -> FLOAT .)
    GEQ             reduce using rule 44 (expr -> FLOAT .)
    ;               reduce using rule 44 (expr -> FLOAT .)
    ,               reduce using rule 44 (expr -> FLOAT .)
    )               reduce using rule 44 (expr -> FLOAT .)
    :               reduce using rule 44 (expr -> FLOAT .)
    {               reduce using rule 44 (expr -> FLOAT .)
    IF              reduce using rule 44 (expr -> FLOAT .)
    FOR             reduce using rule 44 (expr -> FLOAT .)
    WHILE           reduce using rule 44 (expr -> FLOAT .)
    RETURN          reduce using rule 44 (expr -> FLOAT .)
    PRINT           reduce using rule 44 (expr -> FLOAT .)
    BREAK           reduce using rule 44 (expr -> FLOAT .)
    CONTINUE        reduce using rule 44 (expr -> FLOAT .)
    ID              reduce using rule 44 (expr -> FLOAT .)


state 44

    (60) matrix_create -> ZEROS .

    (               reduce using rule 60 (matrix_create -> ZEROS .)


state 45

    (61) matrix_create -> ONES .

    (               reduce using rule 61 (matrix_create -> ONES .)


state 46

    (62) matrix_create -> EYE .

    (               reduce using rule 62 (matrix_create -> EYE .)


state 47

    (59) matrix -> [ . vectors ]
    (64) vectors -> . vectors , vector
    (65) vectors -> . vector
    (66) vector -> . [ variables ]

    [               shift and go to state 81

    vectors                        shift and go to state 82
    vector                         shift and go to state 83

state 48

    (28) keyword_assign -> assignable = . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    assignable                     shift and go to state 40
    expr                           shift and go to state 84
    matrix_create                  shift and go to state 38
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 49

    (29) keyword_assign -> assignable ADDASSIGN . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    assignable                     shift and go to state 40
    expr                           shift and go to state 85
    matrix_create                  shift and go to state 38
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 50

    (30) keyword_assign -> assignable SUBASSIGN . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    assignable                     shift and go to state 40
    expr                           shift and go to state 86
    matrix_create                  shift and go to state 38
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 51

    (31) keyword_assign -> assignable MULASSIGN . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    assignable                     shift and go to state 40
    expr                           shift and go to state 87
    matrix_create                  shift and go to state 38
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 52

    (32) keyword_assign -> assignable DIVASSIGN . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    assignable                     shift and go to state 40
    expr                           shift and go to state 88
    matrix_create                  shift and go to state 38
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 53

    (23) keyword_print -> PRINT printables .
    (25) printables -> printables . , printable

    ;               reduce using rule 23 (keyword_print -> PRINT printables .)
    ,               shift and go to state 89


state 54

    (24) printables -> printable .

    ,               reduce using rule 24 (printables -> printable .)
    ;               reduce using rule 24 (printables -> printable .)


state 55

    (26) printable -> expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ,               reduce using rule 26 (printable -> expr .)
    ;               reduce using rule 26 (printable -> expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 56

    (27) printable -> str .

    ,               reduce using rule 27 (printable -> str .)
    ;               reduce using rule 27 (printable -> str .)


state 57

    (22) str -> STRING .

    ,               reduce using rule 22 (str -> STRING .)
    ;               reduce using rule 22 (str -> STRING .)


state 58

    (13) keyword -> { keywords } .

    {               reduce using rule 13 (keyword -> { keywords } .)
    IF              reduce using rule 13 (keyword -> { keywords } .)
    FOR             reduce using rule 13 (keyword -> { keywords } .)
    WHILE           reduce using rule 13 (keyword -> { keywords } .)
    RETURN          reduce using rule 13 (keyword -> { keywords } .)
    PRINT           reduce using rule 13 (keyword -> { keywords } .)
    BREAK           reduce using rule 13 (keyword -> { keywords } .)
    CONTINUE        reduce using rule 13 (keyword -> { keywords } .)
    ID              reduce using rule 13 (keyword -> { keywords } .)
    $end            reduce using rule 13 (keyword -> { keywords } .)
    }               reduce using rule 13 (keyword -> { keywords } .)
    ELSE            reduce using rule 13 (keyword -> { keywords } .)


state 59

    (14) keyword_if -> IF ( expr . ) keyword
    (15) keyword_if -> IF ( expr . ) keyword ELSE keyword
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    )               shift and go to state 90
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 60

    (18) keyword_for -> FOR id = . expr : expr keyword
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    id                             shift and go to state 15
    expr                           shift and go to state 91
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 61

    (63) matrix_element -> id [ INTNUM . , INTNUM ]
    (67) vector_element -> id [ INTNUM . ]

    ,               shift and go to state 92
    ]               shift and go to state 93


state 62

    (19) keyword_while -> WHILE ( expr . ) keyword
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    )               shift and go to state 94
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 63

    (37) expr -> expr ' .

    '               reduce using rule 37 (expr -> expr ' .)
    +               reduce using rule 37 (expr -> expr ' .)
    -               reduce using rule 37 (expr -> expr ' .)
    *               reduce using rule 37 (expr -> expr ' .)
    /               reduce using rule 37 (expr -> expr ' .)
    DOTADD          reduce using rule 37 (expr -> expr ' .)
    DOTSUB          reduce using rule 37 (expr -> expr ' .)
    DOTMUL          reduce using rule 37 (expr -> expr ' .)
    DOTDIV          reduce using rule 37 (expr -> expr ' .)
    >               reduce using rule 37 (expr -> expr ' .)
    <               reduce using rule 37 (expr -> expr ' .)
    EQ              reduce using rule 37 (expr -> expr ' .)
    NEQ             reduce using rule 37 (expr -> expr ' .)
    LEQ             reduce using rule 37 (expr -> expr ' .)
    GEQ             reduce using rule 37 (expr -> expr ' .)
    ;               reduce using rule 37 (expr -> expr ' .)
    ,               reduce using rule 37 (expr -> expr ' .)
    )               reduce using rule 37 (expr -> expr ' .)
    :               reduce using rule 37 (expr -> expr ' .)
    {               reduce using rule 37 (expr -> expr ' .)
    IF              reduce using rule 37 (expr -> expr ' .)
    FOR             reduce using rule 37 (expr -> expr ' .)
    WHILE           reduce using rule 37 (expr -> expr ' .)
    RETURN          reduce using rule 37 (expr -> expr ' .)
    PRINT           reduce using rule 37 (expr -> expr ' .)
    BREAK           reduce using rule 37 (expr -> expr ' .)
    CONTINUE        reduce using rule 37 (expr -> expr ' .)
    ID              reduce using rule 37 (expr -> expr ' .)


state 64

    (45) expr -> expr + . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 95
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 65

    (46) expr -> expr - . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 96
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 66

    (47) expr -> expr * . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 97
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 67

    (48) expr -> expr / . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 98
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 68

    (49) expr -> expr DOTADD . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 99
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 69

    (50) expr -> expr DOTSUB . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 100
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 70

    (51) expr -> expr DOTMUL . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 101
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 71

    (52) expr -> expr DOTDIV . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 102
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 72

    (53) expr -> expr > . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 103
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 73

    (54) expr -> expr < . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 104
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 74

    (55) expr -> expr EQ . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 105
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 75

    (56) expr -> expr NEQ . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 106
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 76

    (57) expr -> expr LEQ . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 107
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 77

    (58) expr -> expr GEQ . expr
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    expr                           shift and go to state 108
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 78

    (38) expr -> ( expr . )
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    )               shift and go to state 109
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 79

    (39) expr -> matrix_create ( . expr )
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    matrix_create                  shift and go to state 38
    expr                           shift and go to state 110
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 80

    (40) expr -> - expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 40 (expr -> - expr .)
    -               reduce using rule 40 (expr -> - expr .)
    *               reduce using rule 40 (expr -> - expr .)
    /               reduce using rule 40 (expr -> - expr .)
    DOTADD          reduce using rule 40 (expr -> - expr .)
    DOTSUB          reduce using rule 40 (expr -> - expr .)
    DOTMUL          reduce using rule 40 (expr -> - expr .)
    DOTDIV          reduce using rule 40 (expr -> - expr .)
    >               reduce using rule 40 (expr -> - expr .)
    <               reduce using rule 40 (expr -> - expr .)
    EQ              reduce using rule 40 (expr -> - expr .)
    NEQ             reduce using rule 40 (expr -> - expr .)
    LEQ             reduce using rule 40 (expr -> - expr .)
    GEQ             reduce using rule 40 (expr -> - expr .)
    ;               reduce using rule 40 (expr -> - expr .)
    ,               reduce using rule 40 (expr -> - expr .)
    )               reduce using rule 40 (expr -> - expr .)
    :               reduce using rule 40 (expr -> - expr .)
    {               reduce using rule 40 (expr -> - expr .)
    IF              reduce using rule 40 (expr -> - expr .)
    FOR             reduce using rule 40 (expr -> - expr .)
    WHILE           reduce using rule 40 (expr -> - expr .)
    RETURN          reduce using rule 40 (expr -> - expr .)
    PRINT           reduce using rule 40 (expr -> - expr .)
    BREAK           reduce using rule 40 (expr -> - expr .)
    CONTINUE        reduce using rule 40 (expr -> - expr .)
    ID              reduce using rule 40 (expr -> - expr .)
    '               shift and go to state 63

  ! '               [ reduce using rule 40 (expr -> - expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! DOTMUL          [ shift and go to state 70 ]
  ! DOTDIV          [ shift and go to state 71 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 81

    (66) vector -> [ . variables ]
    (68) variables -> . variables , variable
    (69) variables -> . variable
    (70) variable -> . INTNUM
    (71) variable -> . FLOAT
    (72) variable -> . assignable
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    INTNUM          shift and go to state 113
    FLOAT           shift and go to state 114
    ID              shift and go to state 24

    variables                      shift and go to state 111
    variable                       shift and go to state 112
    assignable                     shift and go to state 115
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 82

    (59) matrix -> [ vectors . ]
    (64) vectors -> vectors . , vector

    ]               shift and go to state 116
    ,               shift and go to state 117


state 83

    (65) vectors -> vector .

    ]               reduce using rule 65 (vectors -> vector .)
    ,               reduce using rule 65 (vectors -> vector .)


state 84

    (28) keyword_assign -> assignable = expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 28 (keyword_assign -> assignable = expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 85

    (29) keyword_assign -> assignable ADDASSIGN expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 29 (keyword_assign -> assignable ADDASSIGN expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 86

    (30) keyword_assign -> assignable SUBASSIGN expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 30 (keyword_assign -> assignable SUBASSIGN expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 87

    (31) keyword_assign -> assignable MULASSIGN expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 31 (keyword_assign -> assignable MULASSIGN expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 88

    (32) keyword_assign -> assignable DIVASSIGN expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    ;               reduce using rule 32 (keyword_assign -> assignable DIVASSIGN expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 89

    (25) printables -> printables , . printable
    (26) printable -> . expr
    (27) printable -> . str
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (22) str -> . STRING
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    STRING          shift and go to state 57
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    printable                      shift and go to state 118
    expr                           shift and go to state 55
    str                            shift and go to state 56
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 90

    (14) keyword_if -> IF ( expr ) . keyword
    (15) keyword_if -> IF ( expr ) . keyword ELSE keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keyword                        shift and go to state 119
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 91

    (18) keyword_for -> FOR id = expr . : expr keyword
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    :               shift and go to state 120
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 92

    (63) matrix_element -> id [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 121


state 93

    (67) vector_element -> id [ INTNUM ] .

    =               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    ADDASSIGN       reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    SUBASSIGN       reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    MULASSIGN       reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    DIVASSIGN       reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    '               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    +               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    -               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    *               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    /               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    DOTADD          reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    DOTSUB          reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    DOTMUL          reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    DOTDIV          reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    >               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    <               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    EQ              reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    NEQ             reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    LEQ             reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    GEQ             reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    ;               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    ,               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    )               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    :               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    {               reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    IF              reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    FOR             reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    WHILE           reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    RETURN          reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    PRINT           reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    BREAK           reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    CONTINUE        reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    ID              reduce using rule 67 (vector_element -> id [ INTNUM ] .)
    ]               reduce using rule 67 (vector_element -> id [ INTNUM ] .)


state 94

    (19) keyword_while -> WHILE ( expr ) . keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keyword                        shift and go to state 122
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 95

    (45) expr -> expr + expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 45 (expr -> expr + expr .)
    -               reduce using rule 45 (expr -> expr + expr .)
    >               reduce using rule 45 (expr -> expr + expr .)
    <               reduce using rule 45 (expr -> expr + expr .)
    EQ              reduce using rule 45 (expr -> expr + expr .)
    NEQ             reduce using rule 45 (expr -> expr + expr .)
    LEQ             reduce using rule 45 (expr -> expr + expr .)
    GEQ             reduce using rule 45 (expr -> expr + expr .)
    ;               reduce using rule 45 (expr -> expr + expr .)
    ,               reduce using rule 45 (expr -> expr + expr .)
    )               reduce using rule 45 (expr -> expr + expr .)
    :               reduce using rule 45 (expr -> expr + expr .)
    {               reduce using rule 45 (expr -> expr + expr .)
    IF              reduce using rule 45 (expr -> expr + expr .)
    FOR             reduce using rule 45 (expr -> expr + expr .)
    WHILE           reduce using rule 45 (expr -> expr + expr .)
    RETURN          reduce using rule 45 (expr -> expr + expr .)
    PRINT           reduce using rule 45 (expr -> expr + expr .)
    BREAK           reduce using rule 45 (expr -> expr + expr .)
    CONTINUE        reduce using rule 45 (expr -> expr + expr .)
    ID              reduce using rule 45 (expr -> expr + expr .)
    '               shift and go to state 63
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 45 (expr -> expr + expr .) ]
  ! *               [ reduce using rule 45 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 45 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 45 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 45 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 45 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 45 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 96

    (46) expr -> expr - expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 46 (expr -> expr - expr .)
    -               reduce using rule 46 (expr -> expr - expr .)
    >               reduce using rule 46 (expr -> expr - expr .)
    <               reduce using rule 46 (expr -> expr - expr .)
    EQ              reduce using rule 46 (expr -> expr - expr .)
    NEQ             reduce using rule 46 (expr -> expr - expr .)
    LEQ             reduce using rule 46 (expr -> expr - expr .)
    GEQ             reduce using rule 46 (expr -> expr - expr .)
    ;               reduce using rule 46 (expr -> expr - expr .)
    ,               reduce using rule 46 (expr -> expr - expr .)
    )               reduce using rule 46 (expr -> expr - expr .)
    :               reduce using rule 46 (expr -> expr - expr .)
    {               reduce using rule 46 (expr -> expr - expr .)
    IF              reduce using rule 46 (expr -> expr - expr .)
    FOR             reduce using rule 46 (expr -> expr - expr .)
    WHILE           reduce using rule 46 (expr -> expr - expr .)
    RETURN          reduce using rule 46 (expr -> expr - expr .)
    PRINT           reduce using rule 46 (expr -> expr - expr .)
    BREAK           reduce using rule 46 (expr -> expr - expr .)
    CONTINUE        reduce using rule 46 (expr -> expr - expr .)
    ID              reduce using rule 46 (expr -> expr - expr .)
    '               shift and go to state 63
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 46 (expr -> expr - expr .) ]
  ! *               [ reduce using rule 46 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 46 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 46 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 46 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 46 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 46 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 97

    (47) expr -> expr * expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 47 (expr -> expr * expr .)
    -               reduce using rule 47 (expr -> expr * expr .)
    *               reduce using rule 47 (expr -> expr * expr .)
    /               reduce using rule 47 (expr -> expr * expr .)
    DOTADD          reduce using rule 47 (expr -> expr * expr .)
    DOTSUB          reduce using rule 47 (expr -> expr * expr .)
    >               reduce using rule 47 (expr -> expr * expr .)
    <               reduce using rule 47 (expr -> expr * expr .)
    EQ              reduce using rule 47 (expr -> expr * expr .)
    NEQ             reduce using rule 47 (expr -> expr * expr .)
    LEQ             reduce using rule 47 (expr -> expr * expr .)
    GEQ             reduce using rule 47 (expr -> expr * expr .)
    ;               reduce using rule 47 (expr -> expr * expr .)
    ,               reduce using rule 47 (expr -> expr * expr .)
    )               reduce using rule 47 (expr -> expr * expr .)
    :               reduce using rule 47 (expr -> expr * expr .)
    {               reduce using rule 47 (expr -> expr * expr .)
    IF              reduce using rule 47 (expr -> expr * expr .)
    FOR             reduce using rule 47 (expr -> expr * expr .)
    WHILE           reduce using rule 47 (expr -> expr * expr .)
    RETURN          reduce using rule 47 (expr -> expr * expr .)
    PRINT           reduce using rule 47 (expr -> expr * expr .)
    BREAK           reduce using rule 47 (expr -> expr * expr .)
    CONTINUE        reduce using rule 47 (expr -> expr * expr .)
    ID              reduce using rule 47 (expr -> expr * expr .)
    '               shift and go to state 63
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 47 (expr -> expr * expr .) ]
  ! DOTMUL          [ reduce using rule 47 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 47 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 98

    (48) expr -> expr / expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 48 (expr -> expr / expr .)
    -               reduce using rule 48 (expr -> expr / expr .)
    *               reduce using rule 48 (expr -> expr / expr .)
    /               reduce using rule 48 (expr -> expr / expr .)
    DOTADD          reduce using rule 48 (expr -> expr / expr .)
    DOTSUB          reduce using rule 48 (expr -> expr / expr .)
    >               reduce using rule 48 (expr -> expr / expr .)
    <               reduce using rule 48 (expr -> expr / expr .)
    EQ              reduce using rule 48 (expr -> expr / expr .)
    NEQ             reduce using rule 48 (expr -> expr / expr .)
    LEQ             reduce using rule 48 (expr -> expr / expr .)
    GEQ             reduce using rule 48 (expr -> expr / expr .)
    ;               reduce using rule 48 (expr -> expr / expr .)
    ,               reduce using rule 48 (expr -> expr / expr .)
    )               reduce using rule 48 (expr -> expr / expr .)
    :               reduce using rule 48 (expr -> expr / expr .)
    {               reduce using rule 48 (expr -> expr / expr .)
    IF              reduce using rule 48 (expr -> expr / expr .)
    FOR             reduce using rule 48 (expr -> expr / expr .)
    WHILE           reduce using rule 48 (expr -> expr / expr .)
    RETURN          reduce using rule 48 (expr -> expr / expr .)
    PRINT           reduce using rule 48 (expr -> expr / expr .)
    BREAK           reduce using rule 48 (expr -> expr / expr .)
    CONTINUE        reduce using rule 48 (expr -> expr / expr .)
    ID              reduce using rule 48 (expr -> expr / expr .)
    '               shift and go to state 63
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 48 (expr -> expr / expr .) ]
  ! DOTMUL          [ reduce using rule 48 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 48 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 99

    (49) expr -> expr DOTADD expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 49 (expr -> expr DOTADD expr .)
    -               reduce using rule 49 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 49 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 49 (expr -> expr DOTADD expr .)
    >               reduce using rule 49 (expr -> expr DOTADD expr .)
    <               reduce using rule 49 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 49 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 49 (expr -> expr DOTADD expr .)
    LEQ             reduce using rule 49 (expr -> expr DOTADD expr .)
    GEQ             reduce using rule 49 (expr -> expr DOTADD expr .)
    ;               reduce using rule 49 (expr -> expr DOTADD expr .)
    ,               reduce using rule 49 (expr -> expr DOTADD expr .)
    )               reduce using rule 49 (expr -> expr DOTADD expr .)
    :               reduce using rule 49 (expr -> expr DOTADD expr .)
    {               reduce using rule 49 (expr -> expr DOTADD expr .)
    IF              reduce using rule 49 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 49 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 49 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 49 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 49 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 49 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 49 (expr -> expr DOTADD expr .)
    ID              reduce using rule 49 (expr -> expr DOTADD expr .)
    '               shift and go to state 63
    *               shift and go to state 66
    /               shift and go to state 67
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 49 (expr -> expr DOTADD expr .) ]
  ! *               [ reduce using rule 49 (expr -> expr DOTADD expr .) ]
  ! /               [ reduce using rule 49 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 49 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 49 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 100

    (50) expr -> expr DOTSUB expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 50 (expr -> expr DOTSUB expr .)
    -               reduce using rule 50 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 50 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 50 (expr -> expr DOTSUB expr .)
    >               reduce using rule 50 (expr -> expr DOTSUB expr .)
    <               reduce using rule 50 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 50 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 50 (expr -> expr DOTSUB expr .)
    LEQ             reduce using rule 50 (expr -> expr DOTSUB expr .)
    GEQ             reduce using rule 50 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 50 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 50 (expr -> expr DOTSUB expr .)
    )               reduce using rule 50 (expr -> expr DOTSUB expr .)
    :               reduce using rule 50 (expr -> expr DOTSUB expr .)
    {               reduce using rule 50 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 50 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 50 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 50 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 50 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 50 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 50 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 50 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 50 (expr -> expr DOTSUB expr .)
    '               shift and go to state 63
    *               shift and go to state 66
    /               shift and go to state 67
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 50 (expr -> expr DOTSUB expr .) ]
  ! *               [ reduce using rule 50 (expr -> expr DOTSUB expr .) ]
  ! /               [ reduce using rule 50 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 50 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 50 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 101

    (51) expr -> expr DOTMUL expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 51 (expr -> expr DOTMUL expr .)
    -               reduce using rule 51 (expr -> expr DOTMUL expr .)
    *               reduce using rule 51 (expr -> expr DOTMUL expr .)
    /               reduce using rule 51 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 51 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 51 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 51 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 51 (expr -> expr DOTMUL expr .)
    >               reduce using rule 51 (expr -> expr DOTMUL expr .)
    <               reduce using rule 51 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 51 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 51 (expr -> expr DOTMUL expr .)
    LEQ             reduce using rule 51 (expr -> expr DOTMUL expr .)
    GEQ             reduce using rule 51 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 51 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 51 (expr -> expr DOTMUL expr .)
    )               reduce using rule 51 (expr -> expr DOTMUL expr .)
    :               reduce using rule 51 (expr -> expr DOTMUL expr .)
    {               reduce using rule 51 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 51 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 51 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 51 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 51 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 51 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 51 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 51 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 51 (expr -> expr DOTMUL expr .)
    '               shift and go to state 63

  ! '               [ reduce using rule 51 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! DOTMUL          [ shift and go to state 70 ]
  ! DOTDIV          [ shift and go to state 71 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 102

    (52) expr -> expr DOTDIV expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    +               reduce using rule 52 (expr -> expr DOTDIV expr .)
    -               reduce using rule 52 (expr -> expr DOTDIV expr .)
    *               reduce using rule 52 (expr -> expr DOTDIV expr .)
    /               reduce using rule 52 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 52 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 52 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 52 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 52 (expr -> expr DOTDIV expr .)
    >               reduce using rule 52 (expr -> expr DOTDIV expr .)
    <               reduce using rule 52 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 52 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 52 (expr -> expr DOTDIV expr .)
    LEQ             reduce using rule 52 (expr -> expr DOTDIV expr .)
    GEQ             reduce using rule 52 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 52 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 52 (expr -> expr DOTDIV expr .)
    )               reduce using rule 52 (expr -> expr DOTDIV expr .)
    :               reduce using rule 52 (expr -> expr DOTDIV expr .)
    {               reduce using rule 52 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 52 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 52 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 52 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 52 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 52 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 52 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 52 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 52 (expr -> expr DOTDIV expr .)
    '               shift and go to state 63

  ! '               [ reduce using rule 52 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 64 ]
  ! -               [ shift and go to state 65 ]
  ! *               [ shift and go to state 66 ]
  ! /               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 68 ]
  ! DOTSUB          [ shift and go to state 69 ]
  ! DOTMUL          [ shift and go to state 70 ]
  ! DOTDIV          [ shift and go to state 71 ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 103

    (53) expr -> expr > expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 53 (expr -> expr > expr .)
    <               reduce using rule 53 (expr -> expr > expr .)
    EQ              reduce using rule 53 (expr -> expr > expr .)
    NEQ             reduce using rule 53 (expr -> expr > expr .)
    LEQ             reduce using rule 53 (expr -> expr > expr .)
    GEQ             reduce using rule 53 (expr -> expr > expr .)
    ;               reduce using rule 53 (expr -> expr > expr .)
    ,               reduce using rule 53 (expr -> expr > expr .)
    )               reduce using rule 53 (expr -> expr > expr .)
    :               reduce using rule 53 (expr -> expr > expr .)
    {               reduce using rule 53 (expr -> expr > expr .)
    IF              reduce using rule 53 (expr -> expr > expr .)
    FOR             reduce using rule 53 (expr -> expr > expr .)
    WHILE           reduce using rule 53 (expr -> expr > expr .)
    RETURN          reduce using rule 53 (expr -> expr > expr .)
    PRINT           reduce using rule 53 (expr -> expr > expr .)
    BREAK           reduce using rule 53 (expr -> expr > expr .)
    CONTINUE        reduce using rule 53 (expr -> expr > expr .)
    ID              reduce using rule 53 (expr -> expr > expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! +               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! -               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! *               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! /               [ reduce using rule 53 (expr -> expr > expr .) ]
  ! DOTADD          [ reduce using rule 53 (expr -> expr > expr .) ]
  ! DOTSUB          [ reduce using rule 53 (expr -> expr > expr .) ]
  ! DOTMUL          [ reduce using rule 53 (expr -> expr > expr .) ]
  ! DOTDIV          [ reduce using rule 53 (expr -> expr > expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 104

    (54) expr -> expr < expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 54 (expr -> expr < expr .)
    <               reduce using rule 54 (expr -> expr < expr .)
    EQ              reduce using rule 54 (expr -> expr < expr .)
    NEQ             reduce using rule 54 (expr -> expr < expr .)
    LEQ             reduce using rule 54 (expr -> expr < expr .)
    GEQ             reduce using rule 54 (expr -> expr < expr .)
    ;               reduce using rule 54 (expr -> expr < expr .)
    ,               reduce using rule 54 (expr -> expr < expr .)
    )               reduce using rule 54 (expr -> expr < expr .)
    :               reduce using rule 54 (expr -> expr < expr .)
    {               reduce using rule 54 (expr -> expr < expr .)
    IF              reduce using rule 54 (expr -> expr < expr .)
    FOR             reduce using rule 54 (expr -> expr < expr .)
    WHILE           reduce using rule 54 (expr -> expr < expr .)
    RETURN          reduce using rule 54 (expr -> expr < expr .)
    PRINT           reduce using rule 54 (expr -> expr < expr .)
    BREAK           reduce using rule 54 (expr -> expr < expr .)
    CONTINUE        reduce using rule 54 (expr -> expr < expr .)
    ID              reduce using rule 54 (expr -> expr < expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! +               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! -               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! *               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! /               [ reduce using rule 54 (expr -> expr < expr .) ]
  ! DOTADD          [ reduce using rule 54 (expr -> expr < expr .) ]
  ! DOTSUB          [ reduce using rule 54 (expr -> expr < expr .) ]
  ! DOTMUL          [ reduce using rule 54 (expr -> expr < expr .) ]
  ! DOTDIV          [ reduce using rule 54 (expr -> expr < expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 105

    (55) expr -> expr EQ expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 55 (expr -> expr EQ expr .)
    <               reduce using rule 55 (expr -> expr EQ expr .)
    EQ              reduce using rule 55 (expr -> expr EQ expr .)
    NEQ             reduce using rule 55 (expr -> expr EQ expr .)
    LEQ             reduce using rule 55 (expr -> expr EQ expr .)
    GEQ             reduce using rule 55 (expr -> expr EQ expr .)
    ;               reduce using rule 55 (expr -> expr EQ expr .)
    ,               reduce using rule 55 (expr -> expr EQ expr .)
    )               reduce using rule 55 (expr -> expr EQ expr .)
    :               reduce using rule 55 (expr -> expr EQ expr .)
    {               reduce using rule 55 (expr -> expr EQ expr .)
    IF              reduce using rule 55 (expr -> expr EQ expr .)
    FOR             reduce using rule 55 (expr -> expr EQ expr .)
    WHILE           reduce using rule 55 (expr -> expr EQ expr .)
    RETURN          reduce using rule 55 (expr -> expr EQ expr .)
    PRINT           reduce using rule 55 (expr -> expr EQ expr .)
    BREAK           reduce using rule 55 (expr -> expr EQ expr .)
    CONTINUE        reduce using rule 55 (expr -> expr EQ expr .)
    ID              reduce using rule 55 (expr -> expr EQ expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! +               [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! -               [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! *               [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! /               [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! DOTADD          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! DOTSUB          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! DOTMUL          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! DOTDIV          [ reduce using rule 55 (expr -> expr EQ expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 106

    (56) expr -> expr NEQ expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 56 (expr -> expr NEQ expr .)
    <               reduce using rule 56 (expr -> expr NEQ expr .)
    EQ              reduce using rule 56 (expr -> expr NEQ expr .)
    NEQ             reduce using rule 56 (expr -> expr NEQ expr .)
    LEQ             reduce using rule 56 (expr -> expr NEQ expr .)
    GEQ             reduce using rule 56 (expr -> expr NEQ expr .)
    ;               reduce using rule 56 (expr -> expr NEQ expr .)
    ,               reduce using rule 56 (expr -> expr NEQ expr .)
    )               reduce using rule 56 (expr -> expr NEQ expr .)
    :               reduce using rule 56 (expr -> expr NEQ expr .)
    {               reduce using rule 56 (expr -> expr NEQ expr .)
    IF              reduce using rule 56 (expr -> expr NEQ expr .)
    FOR             reduce using rule 56 (expr -> expr NEQ expr .)
    WHILE           reduce using rule 56 (expr -> expr NEQ expr .)
    RETURN          reduce using rule 56 (expr -> expr NEQ expr .)
    PRINT           reduce using rule 56 (expr -> expr NEQ expr .)
    BREAK           reduce using rule 56 (expr -> expr NEQ expr .)
    CONTINUE        reduce using rule 56 (expr -> expr NEQ expr .)
    ID              reduce using rule 56 (expr -> expr NEQ expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! +               [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! -               [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! *               [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! /               [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! DOTADD          [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! DOTSUB          [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! DOTMUL          [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! DOTDIV          [ reduce using rule 56 (expr -> expr NEQ expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 107

    (57) expr -> expr LEQ expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 57 (expr -> expr LEQ expr .)
    <               reduce using rule 57 (expr -> expr LEQ expr .)
    EQ              reduce using rule 57 (expr -> expr LEQ expr .)
    NEQ             reduce using rule 57 (expr -> expr LEQ expr .)
    LEQ             reduce using rule 57 (expr -> expr LEQ expr .)
    GEQ             reduce using rule 57 (expr -> expr LEQ expr .)
    ;               reduce using rule 57 (expr -> expr LEQ expr .)
    ,               reduce using rule 57 (expr -> expr LEQ expr .)
    )               reduce using rule 57 (expr -> expr LEQ expr .)
    :               reduce using rule 57 (expr -> expr LEQ expr .)
    {               reduce using rule 57 (expr -> expr LEQ expr .)
    IF              reduce using rule 57 (expr -> expr LEQ expr .)
    FOR             reduce using rule 57 (expr -> expr LEQ expr .)
    WHILE           reduce using rule 57 (expr -> expr LEQ expr .)
    RETURN          reduce using rule 57 (expr -> expr LEQ expr .)
    PRINT           reduce using rule 57 (expr -> expr LEQ expr .)
    BREAK           reduce using rule 57 (expr -> expr LEQ expr .)
    CONTINUE        reduce using rule 57 (expr -> expr LEQ expr .)
    ID              reduce using rule 57 (expr -> expr LEQ expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! +               [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! -               [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! *               [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! /               [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! DOTADD          [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! DOTSUB          [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! DOTMUL          [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! DOTDIV          [ reduce using rule 57 (expr -> expr LEQ expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 108

    (58) expr -> expr GEQ expr .
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    >               reduce using rule 58 (expr -> expr GEQ expr .)
    <               reduce using rule 58 (expr -> expr GEQ expr .)
    EQ              reduce using rule 58 (expr -> expr GEQ expr .)
    NEQ             reduce using rule 58 (expr -> expr GEQ expr .)
    LEQ             reduce using rule 58 (expr -> expr GEQ expr .)
    GEQ             reduce using rule 58 (expr -> expr GEQ expr .)
    ;               reduce using rule 58 (expr -> expr GEQ expr .)
    ,               reduce using rule 58 (expr -> expr GEQ expr .)
    )               reduce using rule 58 (expr -> expr GEQ expr .)
    :               reduce using rule 58 (expr -> expr GEQ expr .)
    {               reduce using rule 58 (expr -> expr GEQ expr .)
    IF              reduce using rule 58 (expr -> expr GEQ expr .)
    FOR             reduce using rule 58 (expr -> expr GEQ expr .)
    WHILE           reduce using rule 58 (expr -> expr GEQ expr .)
    RETURN          reduce using rule 58 (expr -> expr GEQ expr .)
    PRINT           reduce using rule 58 (expr -> expr GEQ expr .)
    BREAK           reduce using rule 58 (expr -> expr GEQ expr .)
    CONTINUE        reduce using rule 58 (expr -> expr GEQ expr .)
    ID              reduce using rule 58 (expr -> expr GEQ expr .)
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71

  ! '               [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! +               [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! -               [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! *               [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! /               [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! DOTADD          [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! DOTSUB          [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! DOTMUL          [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! DOTDIV          [ reduce using rule 58 (expr -> expr GEQ expr .) ]
  ! >               [ shift and go to state 72 ]
  ! <               [ shift and go to state 73 ]
  ! EQ              [ shift and go to state 74 ]
  ! NEQ             [ shift and go to state 75 ]
  ! LEQ             [ shift and go to state 76 ]
  ! GEQ             [ shift and go to state 77 ]


state 109

    (38) expr -> ( expr ) .

    '               reduce using rule 38 (expr -> ( expr ) .)
    +               reduce using rule 38 (expr -> ( expr ) .)
    -               reduce using rule 38 (expr -> ( expr ) .)
    *               reduce using rule 38 (expr -> ( expr ) .)
    /               reduce using rule 38 (expr -> ( expr ) .)
    DOTADD          reduce using rule 38 (expr -> ( expr ) .)
    DOTSUB          reduce using rule 38 (expr -> ( expr ) .)
    DOTMUL          reduce using rule 38 (expr -> ( expr ) .)
    DOTDIV          reduce using rule 38 (expr -> ( expr ) .)
    >               reduce using rule 38 (expr -> ( expr ) .)
    <               reduce using rule 38 (expr -> ( expr ) .)
    EQ              reduce using rule 38 (expr -> ( expr ) .)
    NEQ             reduce using rule 38 (expr -> ( expr ) .)
    LEQ             reduce using rule 38 (expr -> ( expr ) .)
    GEQ             reduce using rule 38 (expr -> ( expr ) .)
    ;               reduce using rule 38 (expr -> ( expr ) .)
    ,               reduce using rule 38 (expr -> ( expr ) .)
    )               reduce using rule 38 (expr -> ( expr ) .)
    :               reduce using rule 38 (expr -> ( expr ) .)
    {               reduce using rule 38 (expr -> ( expr ) .)
    IF              reduce using rule 38 (expr -> ( expr ) .)
    FOR             reduce using rule 38 (expr -> ( expr ) .)
    WHILE           reduce using rule 38 (expr -> ( expr ) .)
    RETURN          reduce using rule 38 (expr -> ( expr ) .)
    PRINT           reduce using rule 38 (expr -> ( expr ) .)
    BREAK           reduce using rule 38 (expr -> ( expr ) .)
    CONTINUE        reduce using rule 38 (expr -> ( expr ) .)
    ID              reduce using rule 38 (expr -> ( expr ) .)


state 110

    (39) expr -> matrix_create ( expr . )
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr

    )               shift and go to state 123
    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77


state 111

    (66) vector -> [ variables . ]
    (68) variables -> variables . , variable

    ]               shift and go to state 124
    ,               shift and go to state 125


state 112

    (69) variables -> variable .

    ]               reduce using rule 69 (variables -> variable .)
    ,               reduce using rule 69 (variables -> variable .)


state 113

    (70) variable -> INTNUM .

    ]               reduce using rule 70 (variable -> INTNUM .)
    ,               reduce using rule 70 (variable -> INTNUM .)


state 114

    (71) variable -> FLOAT .

    ]               reduce using rule 71 (variable -> FLOAT .)
    ,               reduce using rule 71 (variable -> FLOAT .)


state 115

    (72) variable -> assignable .

    ]               reduce using rule 72 (variable -> assignable .)
    ,               reduce using rule 72 (variable -> assignable .)


state 116

    (59) matrix -> [ vectors ] .

    '               reduce using rule 59 (matrix -> [ vectors ] .)
    +               reduce using rule 59 (matrix -> [ vectors ] .)
    -               reduce using rule 59 (matrix -> [ vectors ] .)
    *               reduce using rule 59 (matrix -> [ vectors ] .)
    /               reduce using rule 59 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 59 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 59 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 59 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 59 (matrix -> [ vectors ] .)
    >               reduce using rule 59 (matrix -> [ vectors ] .)
    <               reduce using rule 59 (matrix -> [ vectors ] .)
    EQ              reduce using rule 59 (matrix -> [ vectors ] .)
    NEQ             reduce using rule 59 (matrix -> [ vectors ] .)
    LEQ             reduce using rule 59 (matrix -> [ vectors ] .)
    GEQ             reduce using rule 59 (matrix -> [ vectors ] .)
    ;               reduce using rule 59 (matrix -> [ vectors ] .)
    ,               reduce using rule 59 (matrix -> [ vectors ] .)
    )               reduce using rule 59 (matrix -> [ vectors ] .)
    :               reduce using rule 59 (matrix -> [ vectors ] .)
    {               reduce using rule 59 (matrix -> [ vectors ] .)
    IF              reduce using rule 59 (matrix -> [ vectors ] .)
    FOR             reduce using rule 59 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 59 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 59 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 59 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 59 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 59 (matrix -> [ vectors ] .)
    ID              reduce using rule 59 (matrix -> [ vectors ] .)


state 117

    (64) vectors -> vectors , . vector
    (66) vector -> . [ variables ]

    [               shift and go to state 81

    vector                         shift and go to state 126

state 118

    (25) printables -> printables , printable .

    ,               reduce using rule 25 (printables -> printables , printable .)
    ;               reduce using rule 25 (printables -> printables , printable .)


state 119

    (14) keyword_if -> IF ( expr ) keyword .
    (15) keyword_if -> IF ( expr ) keyword . ELSE keyword

    {               reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    IF              reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    FOR             reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    WHILE           reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    RETURN          reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    PRINT           reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    BREAK           reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    CONTINUE        reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    ID              reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    $end            reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    }               reduce using rule 14 (keyword_if -> IF ( expr ) keyword .)
    ELSE            shift and go to state 127

  ! ELSE            [ reduce using rule 14 (keyword_if -> IF ( expr ) keyword .) ]


state 120

    (18) keyword_for -> FOR id = expr : . expr keyword
    (37) expr -> . expr '
    (38) expr -> . ( expr )
    (39) expr -> . matrix_create ( expr )
    (40) expr -> . - expr
    (41) expr -> . assignable
    (42) expr -> . matrix
    (43) expr -> . INTNUM
    (44) expr -> . FLOAT
    (45) expr -> . expr + expr
    (46) expr -> . expr - expr
    (47) expr -> . expr * expr
    (48) expr -> . expr / expr
    (49) expr -> . expr DOTADD expr
    (50) expr -> . expr DOTSUB expr
    (51) expr -> . expr DOTMUL expr
    (52) expr -> . expr DOTDIV expr
    (53) expr -> . expr > expr
    (54) expr -> . expr < expr
    (55) expr -> . expr EQ expr
    (56) expr -> . expr NEQ expr
    (57) expr -> . expr LEQ expr
    (58) expr -> . expr GEQ expr
    (60) matrix_create -> . ZEROS
    (61) matrix_create -> . ONES
    (62) matrix_create -> . EYE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (59) matrix -> . [ vectors ]
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    (               shift and go to state 37
    -               shift and go to state 39
    INTNUM          shift and go to state 42
    FLOAT           shift and go to state 43
    ZEROS           shift and go to state 44
    ONES            shift and go to state 45
    EYE             shift and go to state 46
    [               shift and go to state 47
    ID              shift and go to state 24

    id                             shift and go to state 15
    expr                           shift and go to state 128
    matrix_create                  shift and go to state 38
    assignable                     shift and go to state 40
    matrix                         shift and go to state 41
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 121

    (63) matrix_element -> id [ INTNUM , INTNUM . ]

    ]               shift and go to state 129


state 122

    (19) keyword_while -> WHILE ( expr ) keyword .

    {               reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    IF              reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    FOR             reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    WHILE           reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    RETURN          reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    PRINT           reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    BREAK           reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    CONTINUE        reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    ID              reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    $end            reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    }               reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)
    ELSE            reduce using rule 19 (keyword_while -> WHILE ( expr ) keyword .)


state 123

    (39) expr -> matrix_create ( expr ) .

    '               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    +               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    -               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    *               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    /               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    DOTADD          reduce using rule 39 (expr -> matrix_create ( expr ) .)
    DOTSUB          reduce using rule 39 (expr -> matrix_create ( expr ) .)
    DOTMUL          reduce using rule 39 (expr -> matrix_create ( expr ) .)
    DOTDIV          reduce using rule 39 (expr -> matrix_create ( expr ) .)
    >               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    <               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    EQ              reduce using rule 39 (expr -> matrix_create ( expr ) .)
    NEQ             reduce using rule 39 (expr -> matrix_create ( expr ) .)
    LEQ             reduce using rule 39 (expr -> matrix_create ( expr ) .)
    GEQ             reduce using rule 39 (expr -> matrix_create ( expr ) .)
    ;               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    ,               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    )               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    :               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    {               reduce using rule 39 (expr -> matrix_create ( expr ) .)
    IF              reduce using rule 39 (expr -> matrix_create ( expr ) .)
    FOR             reduce using rule 39 (expr -> matrix_create ( expr ) .)
    WHILE           reduce using rule 39 (expr -> matrix_create ( expr ) .)
    RETURN          reduce using rule 39 (expr -> matrix_create ( expr ) .)
    PRINT           reduce using rule 39 (expr -> matrix_create ( expr ) .)
    BREAK           reduce using rule 39 (expr -> matrix_create ( expr ) .)
    CONTINUE        reduce using rule 39 (expr -> matrix_create ( expr ) .)
    ID              reduce using rule 39 (expr -> matrix_create ( expr ) .)


state 124

    (66) vector -> [ variables ] .

    ]               reduce using rule 66 (vector -> [ variables ] .)
    ,               reduce using rule 66 (vector -> [ variables ] .)


state 125

    (68) variables -> variables , . variable
    (70) variable -> . INTNUM
    (71) variable -> . FLOAT
    (72) variable -> . assignable
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    INTNUM          shift and go to state 113
    FLOAT           shift and go to state 114
    ID              shift and go to state 24

    variable                       shift and go to state 130
    assignable                     shift and go to state 115
    id                             shift and go to state 15
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 126

    (64) vectors -> vectors , vector .

    ]               reduce using rule 64 (vectors -> vectors , vector .)
    ,               reduce using rule 64 (vectors -> vectors , vector .)


state 127

    (15) keyword_if -> IF ( expr ) keyword ELSE . keyword
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    keyword                        shift and go to state 131
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    id                             shift and go to state 15
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 128

    (18) keyword_for -> FOR id = expr : expr . keyword
    (37) expr -> expr . '
    (45) expr -> expr . + expr
    (46) expr -> expr . - expr
    (47) expr -> expr . * expr
    (48) expr -> expr . / expr
    (49) expr -> expr . DOTADD expr
    (50) expr -> expr . DOTSUB expr
    (51) expr -> expr . DOTMUL expr
    (52) expr -> expr . DOTDIV expr
    (53) expr -> expr . > expr
    (54) expr -> expr . < expr
    (55) expr -> expr . EQ expr
    (56) expr -> expr . NEQ expr
    (57) expr -> expr . LEQ expr
    (58) expr -> expr . GEQ expr
    (5) keyword -> . keyword_if
    (6) keyword -> . keyword_for
    (7) keyword -> . keyword_while
    (8) keyword -> . keyword_return ;
    (9) keyword -> . keyword_assign ;
    (10) keyword -> . keyword_print ;
    (11) keyword -> . break ;
    (12) keyword -> . continue ;
    (13) keyword -> . { keywords }
    (14) keyword_if -> . IF ( expr ) keyword
    (15) keyword_if -> . IF ( expr ) keyword ELSE keyword
    (18) keyword_for -> . FOR id = expr : expr keyword
    (19) keyword_while -> . WHILE ( expr ) keyword
    (16) keyword_return -> . RETURN
    (17) keyword_return -> . RETURN expr
    (28) keyword_assign -> . assignable = expr
    (29) keyword_assign -> . assignable ADDASSIGN expr
    (30) keyword_assign -> . assignable SUBASSIGN expr
    (31) keyword_assign -> . assignable MULASSIGN expr
    (32) keyword_assign -> . assignable DIVASSIGN expr
    (23) keyword_print -> . PRINT printables
    (20) break -> . BREAK
    (21) continue -> . CONTINUE
    (34) assignable -> . id
    (35) assignable -> . matrix_element
    (36) assignable -> . vector_element
    (33) id -> . ID
    (63) matrix_element -> . id [ INTNUM , INTNUM ]
    (67) vector_element -> . id [ INTNUM ]

    '               shift and go to state 63
    +               shift and go to state 64
    -               shift and go to state 65
    *               shift and go to state 66
    /               shift and go to state 67
    DOTADD          shift and go to state 68
    DOTSUB          shift and go to state 69
    DOTMUL          shift and go to state 70
    DOTDIV          shift and go to state 71
    >               shift and go to state 72
    <               shift and go to state 73
    EQ              shift and go to state 74
    NEQ             shift and go to state 75
    LEQ             shift and go to state 76
    GEQ             shift and go to state 77
    {               shift and go to state 12
    IF              shift and go to state 13
    FOR             shift and go to state 14
    WHILE           shift and go to state 16
    RETURN          shift and go to state 17
    PRINT           shift and go to state 19
    BREAK           shift and go to state 20
    CONTINUE        shift and go to state 21
    ID              shift and go to state 24

    id                             shift and go to state 15
    keyword                        shift and go to state 132
    keyword_if                     shift and go to state 4
    keyword_for                    shift and go to state 5
    keyword_while                  shift and go to state 6
    keyword_return                 shift and go to state 7
    keyword_assign                 shift and go to state 8
    keyword_print                  shift and go to state 9
    break                          shift and go to state 10
    continue                       shift and go to state 11
    assignable                     shift and go to state 18
    matrix_element                 shift and go to state 22
    vector_element                 shift and go to state 23

state 129

    (63) matrix_element -> id [ INTNUM , INTNUM ] .

    =               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ADDASSIGN       reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    '               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    +               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    -               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    *               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    /               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    >               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    <               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    NEQ             reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    LEQ             reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    GEQ             reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ;               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ,               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    )               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    :               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    {               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    IF              reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ID              reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ]               reduce using rule 63 (matrix_element -> id [ INTNUM , INTNUM ] .)


state 130

    (68) variables -> variables , variable .

    ]               reduce using rule 68 (variables -> variables , variable .)
    ,               reduce using rule 68 (variables -> variables , variable .)


state 131

    (15) keyword_if -> IF ( expr ) keyword ELSE keyword .

    {               reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    IF              reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    FOR             reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    WHILE           reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    RETURN          reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    PRINT           reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    BREAK           reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    CONTINUE        reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    ID              reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    $end            reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    }               reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)
    ELSE            reduce using rule 15 (keyword_if -> IF ( expr ) keyword ELSE keyword .)


state 132

    (18) keyword_for -> FOR id = expr : expr keyword .

    {               reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    IF              reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    FOR             reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    WHILE           reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    RETURN          reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    PRINT           reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    BREAK           reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    CONTINUE        reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    ID              reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    $end            reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    }               reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)
    ELSE            reduce using rule 18 (keyword_for -> FOR id = expr : expr keyword .)

