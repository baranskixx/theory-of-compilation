Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> instructions
Rule 2     instructions -> instr
Rule 3     instructions -> instructions instr
Rule 4     instr -> instr_assign ;
Rule 5     instr -> statement ;
Rule 6     instr -> { instructions }
Rule 7     instr -> IF ( condition ) instr
Rule 8     instr -> IF ( condition ) instr ELSE instr
Rule 9     statement -> RETURN expr
Rule 10    condition -> expr > expr
Rule 11    condition -> expr < expr
Rule 12    condition -> expr EQ expr
Rule 13    condition -> expr NEQ expr
Rule 14    condition -> expr LEQ expr
Rule 15    condition -> expr GEQ expr
Rule 16    instr -> FOR id = range instr
Rule 17    range -> expr : expr
Rule 18    instr -> WHILE ( expr ) instr
Rule 19    statement -> BREAK
Rule 20    statement -> CONTINUE
Rule 21    str -> STRING
Rule 22    statement -> PRINT printables
Rule 23    printables -> printable
Rule 24    printables -> printables , printable
Rule 25    printable -> expr
Rule 26    assign_operator -> ADDASSIGN
Rule 27    assign_operator -> SUBASSIGN
Rule 28    assign_operator -> MULASSIGN
Rule 29    assign_operator -> DIVASSIGN
Rule 30    assign_operator -> =
Rule 31    instr_assign -> id assign_operator expr
Rule 32    instr_assign -> matrix_element assign_operator expr
Rule 33    instr_assign -> vector_element assign_operator expr
Rule 34    id -> ID
Rule 35    trans -> expr '
Rule 36    uminus -> - expr
Rule 37    expr -> expr + expr
Rule 38    expr -> expr - expr
Rule 39    expr -> expr * expr
Rule 40    expr -> expr / expr
Rule 41    expr -> expr DOTADD expr
Rule 42    expr -> expr DOTSUB expr
Rule 43    expr -> expr DOTMUL expr
Rule 44    expr -> expr DOTDIV expr
Rule 45    expr -> num_expr
Rule 46    expr -> matrix
Rule 47    expr -> matrix_create
Rule 48    expr -> vector
Rule 49    expr -> uminus
Rule 50    expr -> trans
Rule 51    expr -> matrix_element
Rule 52    expr -> vector_element
Rule 53    num_expr -> number
Rule 54    num_expr -> str
Rule 55    num_expr -> id
Rule 56    matrix -> [ vectors ]
Rule 57    matrix_create -> ZEROS ( INTNUM )
Rule 58    matrix_create -> ONES ( INTNUM )
Rule 59    matrix_create -> EYE ( INTNUM )
Rule 60    vectors -> vectors , vector
Rule 61    vectors -> vector
Rule 62    vector -> [ variables ]
Rule 63    variables -> variables , variable
Rule 64    variables -> variable
Rule 65    variable -> number
Rule 66    variable -> id
Rule 67    variable -> element
Rule 68    number -> INTNUM
Rule 69    number -> FLOAT
Rule 70    element -> vector_element
Rule 71    element -> matrix_element
Rule 72    vector_element -> id [ INTNUM ]
Rule 73    matrix_element -> id [ INTNUM , INTNUM ]

Terminals, with rules where they appear

'                    : 35
(                    : 7 8 18 57 58 59
)                    : 7 8 18 57 58 59
*                    : 39
+                    : 37
,                    : 24 60 63 73
-                    : 36 38
/                    : 40
:                    : 17
;                    : 4 5
<                    : 11
=                    : 16 30
>                    : 10
ADDASSIGN            : 26
BREAK                : 19
CONTINUE             : 20
DIVASSIGN            : 29
DOTADD               : 41
DOTDIV               : 44
DOTMUL               : 43
DOTSUB               : 42
ELSE                 : 8
EQ                   : 12
EYE                  : 59
FLOAT                : 69
FOR                  : 16
GEQ                  : 15
ID                   : 34
IF                   : 7 8
INTNUM               : 57 58 59 68 72 73 73
LEQ                  : 14
MULASSIGN            : 28
NEQ                  : 13
ONES                 : 58
PRINT                : 22
RETURN               : 9
STRING               : 21
SUBASSIGN            : 27
WHILE                : 18
ZEROS                : 57
[                    : 56 62 72 73
]                    : 56 62 72 73
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assign_operator      : 31 32 33
condition            : 7 8
element              : 67
expr                 : 9 10 10 11 11 12 12 13 13 14 14 15 15 17 17 18 25 31 32 33 35 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44
id                   : 16 31 55 66 72 73
instr                : 2 3 7 8 8 16 18
instr_assign         : 4
instructions         : 1 3 6
matrix               : 46
matrix_create        : 47
matrix_element       : 32 51 71
num_expr             : 45
number               : 53 65
printable            : 23 24
printables           : 22 24
range                : 16
start                : 0
statement            : 5
str                  : 54
trans                : 50
uminus               : 49
variable             : 63 64
variables            : 62 63
vector               : 48 60 61
vector_element       : 33 52 70
vectors              : 56 60

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . instructions
    (2) instructions -> . instr
    (3) instructions -> . instructions instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    start                          shift and go to state 1
    instructions                   shift and go to state 2
    instr                          shift and go to state 3
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 1

    (0) S' -> start .



state 2

    (1) start -> instructions .
    (3) instructions -> instructions . instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    $end            reduce using rule 1 (start -> instructions .)
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instr                          shift and go to state 18
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 3

    (2) instructions -> instr .

    {               reduce using rule 2 (instructions -> instr .)
    IF              reduce using rule 2 (instructions -> instr .)
    FOR             reduce using rule 2 (instructions -> instr .)
    WHILE           reduce using rule 2 (instructions -> instr .)
    RETURN          reduce using rule 2 (instructions -> instr .)
    BREAK           reduce using rule 2 (instructions -> instr .)
    CONTINUE        reduce using rule 2 (instructions -> instr .)
    PRINT           reduce using rule 2 (instructions -> instr .)
    ID              reduce using rule 2 (instructions -> instr .)
    $end            reduce using rule 2 (instructions -> instr .)
    }               reduce using rule 2 (instructions -> instr .)


state 4

    (4) instr -> instr_assign . ;

    ;               shift and go to state 19


state 5

    (5) instr -> statement . ;

    ;               shift and go to state 20


state 6

    (6) instr -> { . instructions }
    (2) instructions -> . instr
    (3) instructions -> . instructions instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instructions                   shift and go to state 21
    instr                          shift and go to state 3
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 7

    (7) instr -> IF . ( condition ) instr
    (8) instr -> IF . ( condition ) instr ELSE instr

    (               shift and go to state 22


state 8

    (16) instr -> FOR . id = range instr
    (34) id -> . ID

    ID              shift and go to state 17

    id                             shift and go to state 23

state 9

    (31) instr_assign -> id . assign_operator expr
    (73) matrix_element -> id . [ INTNUM , INTNUM ]
    (72) vector_element -> id . [ INTNUM ]
    (26) assign_operator -> . ADDASSIGN
    (27) assign_operator -> . SUBASSIGN
    (28) assign_operator -> . MULASSIGN
    (29) assign_operator -> . DIVASSIGN
    (30) assign_operator -> . =

    [               shift and go to state 25
    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    =               shift and go to state 30

    assign_operator                shift and go to state 24

state 10

    (18) instr -> WHILE . ( expr ) instr

    (               shift and go to state 31


state 11

    (32) instr_assign -> matrix_element . assign_operator expr
    (26) assign_operator -> . ADDASSIGN
    (27) assign_operator -> . SUBASSIGN
    (28) assign_operator -> . MULASSIGN
    (29) assign_operator -> . DIVASSIGN
    (30) assign_operator -> . =

    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    =               shift and go to state 30

    assign_operator                shift and go to state 32

state 12

    (33) instr_assign -> vector_element . assign_operator expr
    (26) assign_operator -> . ADDASSIGN
    (27) assign_operator -> . SUBASSIGN
    (28) assign_operator -> . MULASSIGN
    (29) assign_operator -> . DIVASSIGN
    (30) assign_operator -> . =

    ADDASSIGN       shift and go to state 26
    SUBASSIGN       shift and go to state 27
    MULASSIGN       shift and go to state 28
    DIVASSIGN       shift and go to state 29
    =               shift and go to state 30

    assign_operator                shift and go to state 33

state 13

    (9) statement -> RETURN . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 34
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 14

    (19) statement -> BREAK .

    ;               reduce using rule 19 (statement -> BREAK .)


state 15

    (20) statement -> CONTINUE .

    ;               reduce using rule 20 (statement -> CONTINUE .)


state 16

    (22) statement -> PRINT . printables
    (23) printables -> . printable
    (24) printables -> . printables , printable
    (25) printable -> . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    printables                     shift and go to state 54
    printable                      shift and go to state 55
    expr                           shift and go to state 56
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 17

    (34) id -> ID .

    [               reduce using rule 34 (id -> ID .)
    ADDASSIGN       reduce using rule 34 (id -> ID .)
    SUBASSIGN       reduce using rule 34 (id -> ID .)
    MULASSIGN       reduce using rule 34 (id -> ID .)
    DIVASSIGN       reduce using rule 34 (id -> ID .)
    =               reduce using rule 34 (id -> ID .)
    +               reduce using rule 34 (id -> ID .)
    -               reduce using rule 34 (id -> ID .)
    *               reduce using rule 34 (id -> ID .)
    /               reduce using rule 34 (id -> ID .)
    DOTADD          reduce using rule 34 (id -> ID .)
    DOTSUB          reduce using rule 34 (id -> ID .)
    DOTMUL          reduce using rule 34 (id -> ID .)
    DOTDIV          reduce using rule 34 (id -> ID .)
    '               reduce using rule 34 (id -> ID .)
    ;               reduce using rule 34 (id -> ID .)
    ,               reduce using rule 34 (id -> ID .)
    >               reduce using rule 34 (id -> ID .)
    <               reduce using rule 34 (id -> ID .)
    EQ              reduce using rule 34 (id -> ID .)
    NEQ             reduce using rule 34 (id -> ID .)
    LEQ             reduce using rule 34 (id -> ID .)
    GEQ             reduce using rule 34 (id -> ID .)
    )               reduce using rule 34 (id -> ID .)
    :               reduce using rule 34 (id -> ID .)
    {               reduce using rule 34 (id -> ID .)
    IF              reduce using rule 34 (id -> ID .)
    FOR             reduce using rule 34 (id -> ID .)
    WHILE           reduce using rule 34 (id -> ID .)
    RETURN          reduce using rule 34 (id -> ID .)
    BREAK           reduce using rule 34 (id -> ID .)
    CONTINUE        reduce using rule 34 (id -> ID .)
    PRINT           reduce using rule 34 (id -> ID .)
    ID              reduce using rule 34 (id -> ID .)
    ]               reduce using rule 34 (id -> ID .)


state 18

    (3) instructions -> instructions instr .

    {               reduce using rule 3 (instructions -> instructions instr .)
    IF              reduce using rule 3 (instructions -> instructions instr .)
    FOR             reduce using rule 3 (instructions -> instructions instr .)
    WHILE           reduce using rule 3 (instructions -> instructions instr .)
    RETURN          reduce using rule 3 (instructions -> instructions instr .)
    BREAK           reduce using rule 3 (instructions -> instructions instr .)
    CONTINUE        reduce using rule 3 (instructions -> instructions instr .)
    PRINT           reduce using rule 3 (instructions -> instructions instr .)
    ID              reduce using rule 3 (instructions -> instructions instr .)
    $end            reduce using rule 3 (instructions -> instructions instr .)
    }               reduce using rule 3 (instructions -> instructions instr .)


state 19

    (4) instr -> instr_assign ; .

    {               reduce using rule 4 (instr -> instr_assign ; .)
    IF              reduce using rule 4 (instr -> instr_assign ; .)
    FOR             reduce using rule 4 (instr -> instr_assign ; .)
    WHILE           reduce using rule 4 (instr -> instr_assign ; .)
    RETURN          reduce using rule 4 (instr -> instr_assign ; .)
    BREAK           reduce using rule 4 (instr -> instr_assign ; .)
    CONTINUE        reduce using rule 4 (instr -> instr_assign ; .)
    PRINT           reduce using rule 4 (instr -> instr_assign ; .)
    ID              reduce using rule 4 (instr -> instr_assign ; .)
    $end            reduce using rule 4 (instr -> instr_assign ; .)
    }               reduce using rule 4 (instr -> instr_assign ; .)
    ELSE            reduce using rule 4 (instr -> instr_assign ; .)


state 20

    (5) instr -> statement ; .

    {               reduce using rule 5 (instr -> statement ; .)
    IF              reduce using rule 5 (instr -> statement ; .)
    FOR             reduce using rule 5 (instr -> statement ; .)
    WHILE           reduce using rule 5 (instr -> statement ; .)
    RETURN          reduce using rule 5 (instr -> statement ; .)
    BREAK           reduce using rule 5 (instr -> statement ; .)
    CONTINUE        reduce using rule 5 (instr -> statement ; .)
    PRINT           reduce using rule 5 (instr -> statement ; .)
    ID              reduce using rule 5 (instr -> statement ; .)
    $end            reduce using rule 5 (instr -> statement ; .)
    }               reduce using rule 5 (instr -> statement ; .)
    ELSE            reduce using rule 5 (instr -> statement ; .)


state 21

    (6) instr -> { instructions . }
    (3) instructions -> instructions . instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    }               shift and go to state 57
    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instr                          shift and go to state 18
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 22

    (7) instr -> IF ( . condition ) instr
    (8) instr -> IF ( . condition ) instr ELSE instr
    (10) condition -> . expr > expr
    (11) condition -> . expr < expr
    (12) condition -> . expr EQ expr
    (13) condition -> . expr NEQ expr
    (14) condition -> . expr LEQ expr
    (15) condition -> . expr GEQ expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    condition                      shift and go to state 58
    expr                           shift and go to state 59
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 23

    (16) instr -> FOR id . = range instr

    =               shift and go to state 60


state 24

    (31) instr_assign -> id assign_operator . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    id                             shift and go to state 46
    expr                           shift and go to state 61
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45

state 25

    (73) matrix_element -> id [ . INTNUM , INTNUM ]
    (72) vector_element -> id [ . INTNUM ]

    INTNUM          shift and go to state 62


state 26

    (26) assign_operator -> ADDASSIGN .

    [               reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ONES            reduce using rule 26 (assign_operator -> ADDASSIGN .)
    EYE             reduce using rule 26 (assign_operator -> ADDASSIGN .)
    -               reduce using rule 26 (assign_operator -> ADDASSIGN .)
    INTNUM          reduce using rule 26 (assign_operator -> ADDASSIGN .)
    FLOAT           reduce using rule 26 (assign_operator -> ADDASSIGN .)
    STRING          reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ID              reduce using rule 26 (assign_operator -> ADDASSIGN .)


state 27

    (27) assign_operator -> SUBASSIGN .

    [               reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ONES            reduce using rule 27 (assign_operator -> SUBASSIGN .)
    EYE             reduce using rule 27 (assign_operator -> SUBASSIGN .)
    -               reduce using rule 27 (assign_operator -> SUBASSIGN .)
    INTNUM          reduce using rule 27 (assign_operator -> SUBASSIGN .)
    FLOAT           reduce using rule 27 (assign_operator -> SUBASSIGN .)
    STRING          reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ID              reduce using rule 27 (assign_operator -> SUBASSIGN .)


state 28

    (28) assign_operator -> MULASSIGN .

    [               reduce using rule 28 (assign_operator -> MULASSIGN .)
    ZEROS           reduce using rule 28 (assign_operator -> MULASSIGN .)
    ONES            reduce using rule 28 (assign_operator -> MULASSIGN .)
    EYE             reduce using rule 28 (assign_operator -> MULASSIGN .)
    -               reduce using rule 28 (assign_operator -> MULASSIGN .)
    INTNUM          reduce using rule 28 (assign_operator -> MULASSIGN .)
    FLOAT           reduce using rule 28 (assign_operator -> MULASSIGN .)
    STRING          reduce using rule 28 (assign_operator -> MULASSIGN .)
    ID              reduce using rule 28 (assign_operator -> MULASSIGN .)


state 29

    (29) assign_operator -> DIVASSIGN .

    [               reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ONES            reduce using rule 29 (assign_operator -> DIVASSIGN .)
    EYE             reduce using rule 29 (assign_operator -> DIVASSIGN .)
    -               reduce using rule 29 (assign_operator -> DIVASSIGN .)
    INTNUM          reduce using rule 29 (assign_operator -> DIVASSIGN .)
    FLOAT           reduce using rule 29 (assign_operator -> DIVASSIGN .)
    STRING          reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ID              reduce using rule 29 (assign_operator -> DIVASSIGN .)


state 30

    (30) assign_operator -> = .

    [               reduce using rule 30 (assign_operator -> = .)
    ZEROS           reduce using rule 30 (assign_operator -> = .)
    ONES            reduce using rule 30 (assign_operator -> = .)
    EYE             reduce using rule 30 (assign_operator -> = .)
    -               reduce using rule 30 (assign_operator -> = .)
    INTNUM          reduce using rule 30 (assign_operator -> = .)
    FLOAT           reduce using rule 30 (assign_operator -> = .)
    STRING          reduce using rule 30 (assign_operator -> = .)
    ID              reduce using rule 30 (assign_operator -> = .)


state 31

    (18) instr -> WHILE ( . expr ) instr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 63
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 32

    (32) instr_assign -> matrix_element assign_operator . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    matrix_element                 shift and go to state 42
    expr                           shift and go to state 64
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 33

    (33) instr_assign -> vector_element assign_operator . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    vector_element                 shift and go to state 43
    expr                           shift and go to state 65
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 34

    (9) statement -> RETURN expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    ;               reduce using rule 9 (statement -> RETURN expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 35

    (36) uminus -> - . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 75
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 36

    (45) expr -> num_expr .

    +               reduce using rule 45 (expr -> num_expr .)
    -               reduce using rule 45 (expr -> num_expr .)
    *               reduce using rule 45 (expr -> num_expr .)
    /               reduce using rule 45 (expr -> num_expr .)
    DOTADD          reduce using rule 45 (expr -> num_expr .)
    DOTSUB          reduce using rule 45 (expr -> num_expr .)
    DOTMUL          reduce using rule 45 (expr -> num_expr .)
    DOTDIV          reduce using rule 45 (expr -> num_expr .)
    '               reduce using rule 45 (expr -> num_expr .)
    ;               reduce using rule 45 (expr -> num_expr .)
    ,               reduce using rule 45 (expr -> num_expr .)
    >               reduce using rule 45 (expr -> num_expr .)
    <               reduce using rule 45 (expr -> num_expr .)
    EQ              reduce using rule 45 (expr -> num_expr .)
    NEQ             reduce using rule 45 (expr -> num_expr .)
    LEQ             reduce using rule 45 (expr -> num_expr .)
    GEQ             reduce using rule 45 (expr -> num_expr .)
    )               reduce using rule 45 (expr -> num_expr .)
    :               reduce using rule 45 (expr -> num_expr .)
    {               reduce using rule 45 (expr -> num_expr .)
    IF              reduce using rule 45 (expr -> num_expr .)
    FOR             reduce using rule 45 (expr -> num_expr .)
    WHILE           reduce using rule 45 (expr -> num_expr .)
    RETURN          reduce using rule 45 (expr -> num_expr .)
    BREAK           reduce using rule 45 (expr -> num_expr .)
    CONTINUE        reduce using rule 45 (expr -> num_expr .)
    PRINT           reduce using rule 45 (expr -> num_expr .)
    ID              reduce using rule 45 (expr -> num_expr .)


state 37

    (46) expr -> matrix .

    +               reduce using rule 46 (expr -> matrix .)
    -               reduce using rule 46 (expr -> matrix .)
    *               reduce using rule 46 (expr -> matrix .)
    /               reduce using rule 46 (expr -> matrix .)
    DOTADD          reduce using rule 46 (expr -> matrix .)
    DOTSUB          reduce using rule 46 (expr -> matrix .)
    DOTMUL          reduce using rule 46 (expr -> matrix .)
    DOTDIV          reduce using rule 46 (expr -> matrix .)
    '               reduce using rule 46 (expr -> matrix .)
    ;               reduce using rule 46 (expr -> matrix .)
    ,               reduce using rule 46 (expr -> matrix .)
    >               reduce using rule 46 (expr -> matrix .)
    <               reduce using rule 46 (expr -> matrix .)
    EQ              reduce using rule 46 (expr -> matrix .)
    NEQ             reduce using rule 46 (expr -> matrix .)
    LEQ             reduce using rule 46 (expr -> matrix .)
    GEQ             reduce using rule 46 (expr -> matrix .)
    )               reduce using rule 46 (expr -> matrix .)
    :               reduce using rule 46 (expr -> matrix .)
    {               reduce using rule 46 (expr -> matrix .)
    IF              reduce using rule 46 (expr -> matrix .)
    FOR             reduce using rule 46 (expr -> matrix .)
    WHILE           reduce using rule 46 (expr -> matrix .)
    RETURN          reduce using rule 46 (expr -> matrix .)
    BREAK           reduce using rule 46 (expr -> matrix .)
    CONTINUE        reduce using rule 46 (expr -> matrix .)
    PRINT           reduce using rule 46 (expr -> matrix .)
    ID              reduce using rule 46 (expr -> matrix .)


state 38

    (47) expr -> matrix_create .

    +               reduce using rule 47 (expr -> matrix_create .)
    -               reduce using rule 47 (expr -> matrix_create .)
    *               reduce using rule 47 (expr -> matrix_create .)
    /               reduce using rule 47 (expr -> matrix_create .)
    DOTADD          reduce using rule 47 (expr -> matrix_create .)
    DOTSUB          reduce using rule 47 (expr -> matrix_create .)
    DOTMUL          reduce using rule 47 (expr -> matrix_create .)
    DOTDIV          reduce using rule 47 (expr -> matrix_create .)
    '               reduce using rule 47 (expr -> matrix_create .)
    ;               reduce using rule 47 (expr -> matrix_create .)
    ,               reduce using rule 47 (expr -> matrix_create .)
    >               reduce using rule 47 (expr -> matrix_create .)
    <               reduce using rule 47 (expr -> matrix_create .)
    EQ              reduce using rule 47 (expr -> matrix_create .)
    NEQ             reduce using rule 47 (expr -> matrix_create .)
    LEQ             reduce using rule 47 (expr -> matrix_create .)
    GEQ             reduce using rule 47 (expr -> matrix_create .)
    )               reduce using rule 47 (expr -> matrix_create .)
    :               reduce using rule 47 (expr -> matrix_create .)
    {               reduce using rule 47 (expr -> matrix_create .)
    IF              reduce using rule 47 (expr -> matrix_create .)
    FOR             reduce using rule 47 (expr -> matrix_create .)
    WHILE           reduce using rule 47 (expr -> matrix_create .)
    RETURN          reduce using rule 47 (expr -> matrix_create .)
    BREAK           reduce using rule 47 (expr -> matrix_create .)
    CONTINUE        reduce using rule 47 (expr -> matrix_create .)
    PRINT           reduce using rule 47 (expr -> matrix_create .)
    ID              reduce using rule 47 (expr -> matrix_create .)


state 39

    (48) expr -> vector .

    +               reduce using rule 48 (expr -> vector .)
    -               reduce using rule 48 (expr -> vector .)
    *               reduce using rule 48 (expr -> vector .)
    /               reduce using rule 48 (expr -> vector .)
    DOTADD          reduce using rule 48 (expr -> vector .)
    DOTSUB          reduce using rule 48 (expr -> vector .)
    DOTMUL          reduce using rule 48 (expr -> vector .)
    DOTDIV          reduce using rule 48 (expr -> vector .)
    '               reduce using rule 48 (expr -> vector .)
    ;               reduce using rule 48 (expr -> vector .)
    ,               reduce using rule 48 (expr -> vector .)
    >               reduce using rule 48 (expr -> vector .)
    <               reduce using rule 48 (expr -> vector .)
    EQ              reduce using rule 48 (expr -> vector .)
    NEQ             reduce using rule 48 (expr -> vector .)
    LEQ             reduce using rule 48 (expr -> vector .)
    GEQ             reduce using rule 48 (expr -> vector .)
    )               reduce using rule 48 (expr -> vector .)
    :               reduce using rule 48 (expr -> vector .)
    {               reduce using rule 48 (expr -> vector .)
    IF              reduce using rule 48 (expr -> vector .)
    FOR             reduce using rule 48 (expr -> vector .)
    WHILE           reduce using rule 48 (expr -> vector .)
    RETURN          reduce using rule 48 (expr -> vector .)
    BREAK           reduce using rule 48 (expr -> vector .)
    CONTINUE        reduce using rule 48 (expr -> vector .)
    PRINT           reduce using rule 48 (expr -> vector .)
    ID              reduce using rule 48 (expr -> vector .)


state 40

    (49) expr -> uminus .

    +               reduce using rule 49 (expr -> uminus .)
    -               reduce using rule 49 (expr -> uminus .)
    *               reduce using rule 49 (expr -> uminus .)
    /               reduce using rule 49 (expr -> uminus .)
    DOTADD          reduce using rule 49 (expr -> uminus .)
    DOTSUB          reduce using rule 49 (expr -> uminus .)
    DOTMUL          reduce using rule 49 (expr -> uminus .)
    DOTDIV          reduce using rule 49 (expr -> uminus .)
    '               reduce using rule 49 (expr -> uminus .)
    ;               reduce using rule 49 (expr -> uminus .)
    ,               reduce using rule 49 (expr -> uminus .)
    >               reduce using rule 49 (expr -> uminus .)
    <               reduce using rule 49 (expr -> uminus .)
    EQ              reduce using rule 49 (expr -> uminus .)
    NEQ             reduce using rule 49 (expr -> uminus .)
    LEQ             reduce using rule 49 (expr -> uminus .)
    GEQ             reduce using rule 49 (expr -> uminus .)
    )               reduce using rule 49 (expr -> uminus .)
    :               reduce using rule 49 (expr -> uminus .)
    {               reduce using rule 49 (expr -> uminus .)
    IF              reduce using rule 49 (expr -> uminus .)
    FOR             reduce using rule 49 (expr -> uminus .)
    WHILE           reduce using rule 49 (expr -> uminus .)
    RETURN          reduce using rule 49 (expr -> uminus .)
    BREAK           reduce using rule 49 (expr -> uminus .)
    CONTINUE        reduce using rule 49 (expr -> uminus .)
    PRINT           reduce using rule 49 (expr -> uminus .)
    ID              reduce using rule 49 (expr -> uminus .)


state 41

    (50) expr -> trans .

    +               reduce using rule 50 (expr -> trans .)
    -               reduce using rule 50 (expr -> trans .)
    *               reduce using rule 50 (expr -> trans .)
    /               reduce using rule 50 (expr -> trans .)
    DOTADD          reduce using rule 50 (expr -> trans .)
    DOTSUB          reduce using rule 50 (expr -> trans .)
    DOTMUL          reduce using rule 50 (expr -> trans .)
    DOTDIV          reduce using rule 50 (expr -> trans .)
    '               reduce using rule 50 (expr -> trans .)
    ;               reduce using rule 50 (expr -> trans .)
    ,               reduce using rule 50 (expr -> trans .)
    >               reduce using rule 50 (expr -> trans .)
    <               reduce using rule 50 (expr -> trans .)
    EQ              reduce using rule 50 (expr -> trans .)
    NEQ             reduce using rule 50 (expr -> trans .)
    LEQ             reduce using rule 50 (expr -> trans .)
    GEQ             reduce using rule 50 (expr -> trans .)
    )               reduce using rule 50 (expr -> trans .)
    :               reduce using rule 50 (expr -> trans .)
    {               reduce using rule 50 (expr -> trans .)
    IF              reduce using rule 50 (expr -> trans .)
    FOR             reduce using rule 50 (expr -> trans .)
    WHILE           reduce using rule 50 (expr -> trans .)
    RETURN          reduce using rule 50 (expr -> trans .)
    BREAK           reduce using rule 50 (expr -> trans .)
    CONTINUE        reduce using rule 50 (expr -> trans .)
    PRINT           reduce using rule 50 (expr -> trans .)
    ID              reduce using rule 50 (expr -> trans .)


state 42

    (51) expr -> matrix_element .

    +               reduce using rule 51 (expr -> matrix_element .)
    -               reduce using rule 51 (expr -> matrix_element .)
    *               reduce using rule 51 (expr -> matrix_element .)
    /               reduce using rule 51 (expr -> matrix_element .)
    DOTADD          reduce using rule 51 (expr -> matrix_element .)
    DOTSUB          reduce using rule 51 (expr -> matrix_element .)
    DOTMUL          reduce using rule 51 (expr -> matrix_element .)
    DOTDIV          reduce using rule 51 (expr -> matrix_element .)
    '               reduce using rule 51 (expr -> matrix_element .)
    ;               reduce using rule 51 (expr -> matrix_element .)
    ,               reduce using rule 51 (expr -> matrix_element .)
    >               reduce using rule 51 (expr -> matrix_element .)
    <               reduce using rule 51 (expr -> matrix_element .)
    EQ              reduce using rule 51 (expr -> matrix_element .)
    NEQ             reduce using rule 51 (expr -> matrix_element .)
    LEQ             reduce using rule 51 (expr -> matrix_element .)
    GEQ             reduce using rule 51 (expr -> matrix_element .)
    )               reduce using rule 51 (expr -> matrix_element .)
    :               reduce using rule 51 (expr -> matrix_element .)
    {               reduce using rule 51 (expr -> matrix_element .)
    IF              reduce using rule 51 (expr -> matrix_element .)
    FOR             reduce using rule 51 (expr -> matrix_element .)
    WHILE           reduce using rule 51 (expr -> matrix_element .)
    RETURN          reduce using rule 51 (expr -> matrix_element .)
    BREAK           reduce using rule 51 (expr -> matrix_element .)
    CONTINUE        reduce using rule 51 (expr -> matrix_element .)
    PRINT           reduce using rule 51 (expr -> matrix_element .)
    ID              reduce using rule 51 (expr -> matrix_element .)


state 43

    (52) expr -> vector_element .

    +               reduce using rule 52 (expr -> vector_element .)
    -               reduce using rule 52 (expr -> vector_element .)
    *               reduce using rule 52 (expr -> vector_element .)
    /               reduce using rule 52 (expr -> vector_element .)
    DOTADD          reduce using rule 52 (expr -> vector_element .)
    DOTSUB          reduce using rule 52 (expr -> vector_element .)
    DOTMUL          reduce using rule 52 (expr -> vector_element .)
    DOTDIV          reduce using rule 52 (expr -> vector_element .)
    '               reduce using rule 52 (expr -> vector_element .)
    ;               reduce using rule 52 (expr -> vector_element .)
    ,               reduce using rule 52 (expr -> vector_element .)
    >               reduce using rule 52 (expr -> vector_element .)
    <               reduce using rule 52 (expr -> vector_element .)
    EQ              reduce using rule 52 (expr -> vector_element .)
    NEQ             reduce using rule 52 (expr -> vector_element .)
    LEQ             reduce using rule 52 (expr -> vector_element .)
    GEQ             reduce using rule 52 (expr -> vector_element .)
    )               reduce using rule 52 (expr -> vector_element .)
    :               reduce using rule 52 (expr -> vector_element .)
    {               reduce using rule 52 (expr -> vector_element .)
    IF              reduce using rule 52 (expr -> vector_element .)
    FOR             reduce using rule 52 (expr -> vector_element .)
    WHILE           reduce using rule 52 (expr -> vector_element .)
    RETURN          reduce using rule 52 (expr -> vector_element .)
    BREAK           reduce using rule 52 (expr -> vector_element .)
    CONTINUE        reduce using rule 52 (expr -> vector_element .)
    PRINT           reduce using rule 52 (expr -> vector_element .)
    ID              reduce using rule 52 (expr -> vector_element .)


state 44

    (53) num_expr -> number .

    +               reduce using rule 53 (num_expr -> number .)
    -               reduce using rule 53 (num_expr -> number .)
    *               reduce using rule 53 (num_expr -> number .)
    /               reduce using rule 53 (num_expr -> number .)
    DOTADD          reduce using rule 53 (num_expr -> number .)
    DOTSUB          reduce using rule 53 (num_expr -> number .)
    DOTMUL          reduce using rule 53 (num_expr -> number .)
    DOTDIV          reduce using rule 53 (num_expr -> number .)
    '               reduce using rule 53 (num_expr -> number .)
    ;               reduce using rule 53 (num_expr -> number .)
    ,               reduce using rule 53 (num_expr -> number .)
    >               reduce using rule 53 (num_expr -> number .)
    <               reduce using rule 53 (num_expr -> number .)
    EQ              reduce using rule 53 (num_expr -> number .)
    NEQ             reduce using rule 53 (num_expr -> number .)
    LEQ             reduce using rule 53 (num_expr -> number .)
    GEQ             reduce using rule 53 (num_expr -> number .)
    )               reduce using rule 53 (num_expr -> number .)
    :               reduce using rule 53 (num_expr -> number .)
    {               reduce using rule 53 (num_expr -> number .)
    IF              reduce using rule 53 (num_expr -> number .)
    FOR             reduce using rule 53 (num_expr -> number .)
    WHILE           reduce using rule 53 (num_expr -> number .)
    RETURN          reduce using rule 53 (num_expr -> number .)
    BREAK           reduce using rule 53 (num_expr -> number .)
    CONTINUE        reduce using rule 53 (num_expr -> number .)
    PRINT           reduce using rule 53 (num_expr -> number .)
    ID              reduce using rule 53 (num_expr -> number .)


state 45

    (54) num_expr -> str .

    +               reduce using rule 54 (num_expr -> str .)
    -               reduce using rule 54 (num_expr -> str .)
    *               reduce using rule 54 (num_expr -> str .)
    /               reduce using rule 54 (num_expr -> str .)
    DOTADD          reduce using rule 54 (num_expr -> str .)
    DOTSUB          reduce using rule 54 (num_expr -> str .)
    DOTMUL          reduce using rule 54 (num_expr -> str .)
    DOTDIV          reduce using rule 54 (num_expr -> str .)
    '               reduce using rule 54 (num_expr -> str .)
    ;               reduce using rule 54 (num_expr -> str .)
    ,               reduce using rule 54 (num_expr -> str .)
    >               reduce using rule 54 (num_expr -> str .)
    <               reduce using rule 54 (num_expr -> str .)
    EQ              reduce using rule 54 (num_expr -> str .)
    NEQ             reduce using rule 54 (num_expr -> str .)
    LEQ             reduce using rule 54 (num_expr -> str .)
    GEQ             reduce using rule 54 (num_expr -> str .)
    )               reduce using rule 54 (num_expr -> str .)
    :               reduce using rule 54 (num_expr -> str .)
    {               reduce using rule 54 (num_expr -> str .)
    IF              reduce using rule 54 (num_expr -> str .)
    FOR             reduce using rule 54 (num_expr -> str .)
    WHILE           reduce using rule 54 (num_expr -> str .)
    RETURN          reduce using rule 54 (num_expr -> str .)
    BREAK           reduce using rule 54 (num_expr -> str .)
    CONTINUE        reduce using rule 54 (num_expr -> str .)
    PRINT           reduce using rule 54 (num_expr -> str .)
    ID              reduce using rule 54 (num_expr -> str .)


state 46

    (55) num_expr -> id .
    (73) matrix_element -> id . [ INTNUM , INTNUM ]
    (72) vector_element -> id . [ INTNUM ]

    +               reduce using rule 55 (num_expr -> id .)
    -               reduce using rule 55 (num_expr -> id .)
    *               reduce using rule 55 (num_expr -> id .)
    /               reduce using rule 55 (num_expr -> id .)
    DOTADD          reduce using rule 55 (num_expr -> id .)
    DOTSUB          reduce using rule 55 (num_expr -> id .)
    DOTMUL          reduce using rule 55 (num_expr -> id .)
    DOTDIV          reduce using rule 55 (num_expr -> id .)
    '               reduce using rule 55 (num_expr -> id .)
    ;               reduce using rule 55 (num_expr -> id .)
    ,               reduce using rule 55 (num_expr -> id .)
    >               reduce using rule 55 (num_expr -> id .)
    <               reduce using rule 55 (num_expr -> id .)
    EQ              reduce using rule 55 (num_expr -> id .)
    NEQ             reduce using rule 55 (num_expr -> id .)
    LEQ             reduce using rule 55 (num_expr -> id .)
    GEQ             reduce using rule 55 (num_expr -> id .)
    )               reduce using rule 55 (num_expr -> id .)
    :               reduce using rule 55 (num_expr -> id .)
    {               reduce using rule 55 (num_expr -> id .)
    IF              reduce using rule 55 (num_expr -> id .)
    FOR             reduce using rule 55 (num_expr -> id .)
    WHILE           reduce using rule 55 (num_expr -> id .)
    RETURN          reduce using rule 55 (num_expr -> id .)
    BREAK           reduce using rule 55 (num_expr -> id .)
    CONTINUE        reduce using rule 55 (num_expr -> id .)
    PRINT           reduce using rule 55 (num_expr -> id .)
    ID              reduce using rule 55 (num_expr -> id .)
    [               shift and go to state 25


state 47

    (56) matrix -> [ . vectors ]
    (62) vector -> [ . variables ]
    (60) vectors -> . vectors , vector
    (61) vectors -> . vector
    (63) variables -> . variables , variable
    (64) variables -> . variable
    (62) vector -> . [ variables ]
    (65) variable -> . number
    (66) variable -> . id
    (67) variable -> . element
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (34) id -> . ID
    (70) element -> . vector_element
    (71) element -> . matrix_element
    (72) vector_element -> . id [ INTNUM ]
    (73) matrix_element -> . id [ INTNUM , INTNUM ]

    [               shift and go to state 76
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    ID              shift and go to state 17

    vectors                        shift and go to state 77
    variables                      shift and go to state 78
    vector                         shift and go to state 79
    variable                       shift and go to state 80
    number                         shift and go to state 81
    id                             shift and go to state 82
    element                        shift and go to state 83
    vector_element                 shift and go to state 84
    matrix_element                 shift and go to state 85

state 48

    (57) matrix_create -> ZEROS . ( INTNUM )

    (               shift and go to state 86


state 49

    (68) number -> INTNUM .

    +               reduce using rule 68 (number -> INTNUM .)
    -               reduce using rule 68 (number -> INTNUM .)
    *               reduce using rule 68 (number -> INTNUM .)
    /               reduce using rule 68 (number -> INTNUM .)
    DOTADD          reduce using rule 68 (number -> INTNUM .)
    DOTSUB          reduce using rule 68 (number -> INTNUM .)
    DOTMUL          reduce using rule 68 (number -> INTNUM .)
    DOTDIV          reduce using rule 68 (number -> INTNUM .)
    '               reduce using rule 68 (number -> INTNUM .)
    ;               reduce using rule 68 (number -> INTNUM .)
    ,               reduce using rule 68 (number -> INTNUM .)
    >               reduce using rule 68 (number -> INTNUM .)
    <               reduce using rule 68 (number -> INTNUM .)
    EQ              reduce using rule 68 (number -> INTNUM .)
    NEQ             reduce using rule 68 (number -> INTNUM .)
    LEQ             reduce using rule 68 (number -> INTNUM .)
    GEQ             reduce using rule 68 (number -> INTNUM .)
    )               reduce using rule 68 (number -> INTNUM .)
    :               reduce using rule 68 (number -> INTNUM .)
    {               reduce using rule 68 (number -> INTNUM .)
    IF              reduce using rule 68 (number -> INTNUM .)
    FOR             reduce using rule 68 (number -> INTNUM .)
    WHILE           reduce using rule 68 (number -> INTNUM .)
    RETURN          reduce using rule 68 (number -> INTNUM .)
    BREAK           reduce using rule 68 (number -> INTNUM .)
    CONTINUE        reduce using rule 68 (number -> INTNUM .)
    PRINT           reduce using rule 68 (number -> INTNUM .)
    ID              reduce using rule 68 (number -> INTNUM .)
    ]               reduce using rule 68 (number -> INTNUM .)


state 50

    (58) matrix_create -> ONES . ( INTNUM )

    (               shift and go to state 87


state 51

    (59) matrix_create -> EYE . ( INTNUM )

    (               shift and go to state 88


state 52

    (69) number -> FLOAT .

    +               reduce using rule 69 (number -> FLOAT .)
    -               reduce using rule 69 (number -> FLOAT .)
    *               reduce using rule 69 (number -> FLOAT .)
    /               reduce using rule 69 (number -> FLOAT .)
    DOTADD          reduce using rule 69 (number -> FLOAT .)
    DOTSUB          reduce using rule 69 (number -> FLOAT .)
    DOTMUL          reduce using rule 69 (number -> FLOAT .)
    DOTDIV          reduce using rule 69 (number -> FLOAT .)
    '               reduce using rule 69 (number -> FLOAT .)
    ;               reduce using rule 69 (number -> FLOAT .)
    ,               reduce using rule 69 (number -> FLOAT .)
    >               reduce using rule 69 (number -> FLOAT .)
    <               reduce using rule 69 (number -> FLOAT .)
    EQ              reduce using rule 69 (number -> FLOAT .)
    NEQ             reduce using rule 69 (number -> FLOAT .)
    LEQ             reduce using rule 69 (number -> FLOAT .)
    GEQ             reduce using rule 69 (number -> FLOAT .)
    )               reduce using rule 69 (number -> FLOAT .)
    :               reduce using rule 69 (number -> FLOAT .)
    {               reduce using rule 69 (number -> FLOAT .)
    IF              reduce using rule 69 (number -> FLOAT .)
    FOR             reduce using rule 69 (number -> FLOAT .)
    WHILE           reduce using rule 69 (number -> FLOAT .)
    RETURN          reduce using rule 69 (number -> FLOAT .)
    BREAK           reduce using rule 69 (number -> FLOAT .)
    CONTINUE        reduce using rule 69 (number -> FLOAT .)
    PRINT           reduce using rule 69 (number -> FLOAT .)
    ID              reduce using rule 69 (number -> FLOAT .)
    ]               reduce using rule 69 (number -> FLOAT .)


state 53

    (21) str -> STRING .

    +               reduce using rule 21 (str -> STRING .)
    -               reduce using rule 21 (str -> STRING .)
    *               reduce using rule 21 (str -> STRING .)
    /               reduce using rule 21 (str -> STRING .)
    DOTADD          reduce using rule 21 (str -> STRING .)
    DOTSUB          reduce using rule 21 (str -> STRING .)
    DOTMUL          reduce using rule 21 (str -> STRING .)
    DOTDIV          reduce using rule 21 (str -> STRING .)
    '               reduce using rule 21 (str -> STRING .)
    ;               reduce using rule 21 (str -> STRING .)
    ,               reduce using rule 21 (str -> STRING .)
    >               reduce using rule 21 (str -> STRING .)
    <               reduce using rule 21 (str -> STRING .)
    EQ              reduce using rule 21 (str -> STRING .)
    NEQ             reduce using rule 21 (str -> STRING .)
    LEQ             reduce using rule 21 (str -> STRING .)
    GEQ             reduce using rule 21 (str -> STRING .)
    )               reduce using rule 21 (str -> STRING .)
    :               reduce using rule 21 (str -> STRING .)
    {               reduce using rule 21 (str -> STRING .)
    IF              reduce using rule 21 (str -> STRING .)
    FOR             reduce using rule 21 (str -> STRING .)
    WHILE           reduce using rule 21 (str -> STRING .)
    RETURN          reduce using rule 21 (str -> STRING .)
    BREAK           reduce using rule 21 (str -> STRING .)
    CONTINUE        reduce using rule 21 (str -> STRING .)
    PRINT           reduce using rule 21 (str -> STRING .)
    ID              reduce using rule 21 (str -> STRING .)


state 54

    (22) statement -> PRINT printables .
    (24) printables -> printables . , printable

    ;               reduce using rule 22 (statement -> PRINT printables .)
    ,               shift and go to state 89


state 55

    (23) printables -> printable .

    ,               reduce using rule 23 (printables -> printable .)
    ;               reduce using rule 23 (printables -> printable .)


state 56

    (25) printable -> expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    ,               reduce using rule 25 (printable -> expr .)
    ;               reduce using rule 25 (printable -> expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 57

    (6) instr -> { instructions } .

    {               reduce using rule 6 (instr -> { instructions } .)
    IF              reduce using rule 6 (instr -> { instructions } .)
    FOR             reduce using rule 6 (instr -> { instructions } .)
    WHILE           reduce using rule 6 (instr -> { instructions } .)
    RETURN          reduce using rule 6 (instr -> { instructions } .)
    BREAK           reduce using rule 6 (instr -> { instructions } .)
    CONTINUE        reduce using rule 6 (instr -> { instructions } .)
    PRINT           reduce using rule 6 (instr -> { instructions } .)
    ID              reduce using rule 6 (instr -> { instructions } .)
    $end            reduce using rule 6 (instr -> { instructions } .)
    }               reduce using rule 6 (instr -> { instructions } .)
    ELSE            reduce using rule 6 (instr -> { instructions } .)


state 58

    (7) instr -> IF ( condition . ) instr
    (8) instr -> IF ( condition . ) instr ELSE instr

    )               shift and go to state 90


state 59

    (10) condition -> expr . > expr
    (11) condition -> expr . < expr
    (12) condition -> expr . EQ expr
    (13) condition -> expr . NEQ expr
    (14) condition -> expr . LEQ expr
    (15) condition -> expr . GEQ expr
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    >               shift and go to state 91
    <               shift and go to state 92
    EQ              shift and go to state 93
    NEQ             shift and go to state 94
    LEQ             shift and go to state 95
    GEQ             shift and go to state 96
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 60

    (16) instr -> FOR id = . range instr
    (17) range -> . expr : expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    id                             shift and go to state 46
    range                          shift and go to state 97
    expr                           shift and go to state 98
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45

state 61

    (31) instr_assign -> id assign_operator expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    ;               reduce using rule 31 (instr_assign -> id assign_operator expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 62

    (73) matrix_element -> id [ INTNUM . , INTNUM ]
    (72) vector_element -> id [ INTNUM . ]

    ,               shift and go to state 99
    ]               shift and go to state 100


state 63

    (18) instr -> WHILE ( expr . ) instr
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               shift and go to state 101
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 64

    (32) instr_assign -> matrix_element assign_operator expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    ;               reduce using rule 32 (instr_assign -> matrix_element assign_operator expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 65

    (33) instr_assign -> vector_element assign_operator expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    ;               reduce using rule 33 (instr_assign -> vector_element assign_operator expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 66

    (37) expr -> expr + . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 102
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 67

    (38) expr -> expr - . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 103
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 68

    (39) expr -> expr * . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 104
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 69

    (40) expr -> expr / . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 105
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 70

    (41) expr -> expr DOTADD . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 106
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 71

    (42) expr -> expr DOTSUB . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 107
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 72

    (43) expr -> expr DOTMUL . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 108
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 73

    (44) expr -> expr DOTDIV . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 109
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 74

    (35) trans -> expr ' .

    +               reduce using rule 35 (trans -> expr ' .)
    -               reduce using rule 35 (trans -> expr ' .)
    *               reduce using rule 35 (trans -> expr ' .)
    /               reduce using rule 35 (trans -> expr ' .)
    DOTADD          reduce using rule 35 (trans -> expr ' .)
    DOTSUB          reduce using rule 35 (trans -> expr ' .)
    DOTMUL          reduce using rule 35 (trans -> expr ' .)
    DOTDIV          reduce using rule 35 (trans -> expr ' .)
    '               reduce using rule 35 (trans -> expr ' .)
    ;               reduce using rule 35 (trans -> expr ' .)
    ,               reduce using rule 35 (trans -> expr ' .)
    >               reduce using rule 35 (trans -> expr ' .)
    <               reduce using rule 35 (trans -> expr ' .)
    EQ              reduce using rule 35 (trans -> expr ' .)
    NEQ             reduce using rule 35 (trans -> expr ' .)
    LEQ             reduce using rule 35 (trans -> expr ' .)
    GEQ             reduce using rule 35 (trans -> expr ' .)
    )               reduce using rule 35 (trans -> expr ' .)
    :               reduce using rule 35 (trans -> expr ' .)
    {               reduce using rule 35 (trans -> expr ' .)
    IF              reduce using rule 35 (trans -> expr ' .)
    FOR             reduce using rule 35 (trans -> expr ' .)
    WHILE           reduce using rule 35 (trans -> expr ' .)
    RETURN          reduce using rule 35 (trans -> expr ' .)
    BREAK           reduce using rule 35 (trans -> expr ' .)
    CONTINUE        reduce using rule 35 (trans -> expr ' .)
    PRINT           reduce using rule 35 (trans -> expr ' .)
    ID              reduce using rule 35 (trans -> expr ' .)


state 75

    (36) uminus -> - expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 36 (uminus -> - expr .)
    -               reduce using rule 36 (uminus -> - expr .)
    *               reduce using rule 36 (uminus -> - expr .)
    /               reduce using rule 36 (uminus -> - expr .)
    DOTADD          reduce using rule 36 (uminus -> - expr .)
    DOTSUB          reduce using rule 36 (uminus -> - expr .)
    DOTMUL          reduce using rule 36 (uminus -> - expr .)
    DOTDIV          reduce using rule 36 (uminus -> - expr .)
    ;               reduce using rule 36 (uminus -> - expr .)
    ,               reduce using rule 36 (uminus -> - expr .)
    >               reduce using rule 36 (uminus -> - expr .)
    <               reduce using rule 36 (uminus -> - expr .)
    EQ              reduce using rule 36 (uminus -> - expr .)
    NEQ             reduce using rule 36 (uminus -> - expr .)
    LEQ             reduce using rule 36 (uminus -> - expr .)
    GEQ             reduce using rule 36 (uminus -> - expr .)
    )               reduce using rule 36 (uminus -> - expr .)
    :               reduce using rule 36 (uminus -> - expr .)
    {               reduce using rule 36 (uminus -> - expr .)
    IF              reduce using rule 36 (uminus -> - expr .)
    FOR             reduce using rule 36 (uminus -> - expr .)
    WHILE           reduce using rule 36 (uminus -> - expr .)
    RETURN          reduce using rule 36 (uminus -> - expr .)
    BREAK           reduce using rule 36 (uminus -> - expr .)
    CONTINUE        reduce using rule 36 (uminus -> - expr .)
    PRINT           reduce using rule 36 (uminus -> - expr .)
    ID              reduce using rule 36 (uminus -> - expr .)
    '               shift and go to state 74

  ! '               [ reduce using rule 36 (uminus -> - expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 69 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]
  ! DOTMUL          [ shift and go to state 72 ]
  ! DOTDIV          [ shift and go to state 73 ]


state 76

    (62) vector -> [ . variables ]
    (63) variables -> . variables , variable
    (64) variables -> . variable
    (65) variable -> . number
    (66) variable -> . id
    (67) variable -> . element
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (34) id -> . ID
    (70) element -> . vector_element
    (71) element -> . matrix_element
    (72) vector_element -> . id [ INTNUM ]
    (73) matrix_element -> . id [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    ID              shift and go to state 17

    variables                      shift and go to state 78
    variable                       shift and go to state 80
    number                         shift and go to state 81
    id                             shift and go to state 82
    element                        shift and go to state 83
    vector_element                 shift and go to state 84
    matrix_element                 shift and go to state 85

state 77

    (56) matrix -> [ vectors . ]
    (60) vectors -> vectors . , vector

    ]               shift and go to state 110
    ,               shift and go to state 111


state 78

    (62) vector -> [ variables . ]
    (63) variables -> variables . , variable

    ]               shift and go to state 112
    ,               shift and go to state 113


state 79

    (61) vectors -> vector .

    ]               reduce using rule 61 (vectors -> vector .)
    ,               reduce using rule 61 (vectors -> vector .)


state 80

    (64) variables -> variable .

    ]               reduce using rule 64 (variables -> variable .)
    ,               reduce using rule 64 (variables -> variable .)


state 81

    (65) variable -> number .

    ]               reduce using rule 65 (variable -> number .)
    ,               reduce using rule 65 (variable -> number .)


state 82

    (66) variable -> id .
    (72) vector_element -> id . [ INTNUM ]
    (73) matrix_element -> id . [ INTNUM , INTNUM ]

    ]               reduce using rule 66 (variable -> id .)
    ,               reduce using rule 66 (variable -> id .)
    [               shift and go to state 114


state 83

    (67) variable -> element .

    ]               reduce using rule 67 (variable -> element .)
    ,               reduce using rule 67 (variable -> element .)


state 84

    (70) element -> vector_element .

    ]               reduce using rule 70 (element -> vector_element .)
    ,               reduce using rule 70 (element -> vector_element .)


state 85

    (71) element -> matrix_element .

    ]               reduce using rule 71 (element -> matrix_element .)
    ,               reduce using rule 71 (element -> matrix_element .)


state 86

    (57) matrix_create -> ZEROS ( . INTNUM )

    INTNUM          shift and go to state 115


state 87

    (58) matrix_create -> ONES ( . INTNUM )

    INTNUM          shift and go to state 116


state 88

    (59) matrix_create -> EYE ( . INTNUM )

    INTNUM          shift and go to state 117


state 89

    (24) printables -> printables , . printable
    (25) printable -> . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    printable                      shift and go to state 118
    expr                           shift and go to state 56
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 90

    (7) instr -> IF ( condition ) . instr
    (8) instr -> IF ( condition ) . instr ELSE instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instr                          shift and go to state 119
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 91

    (10) condition -> expr > . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 120
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 92

    (11) condition -> expr < . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 121
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 93

    (12) condition -> expr EQ . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 122
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 94

    (13) condition -> expr NEQ . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 123
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 95

    (14) condition -> expr LEQ . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 124
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 96

    (15) condition -> expr GEQ . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 125
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 97

    (16) instr -> FOR id = range . instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    id                             shift and go to state 9
    instr                          shift and go to state 126
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 98

    (17) range -> expr . : expr
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    :               shift and go to state 127
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 99

    (73) matrix_element -> id [ INTNUM , . INTNUM ]

    INTNUM          shift and go to state 128


state 100

    (72) vector_element -> id [ INTNUM ] .

    ADDASSIGN       reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    SUBASSIGN       reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    MULASSIGN       reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    DIVASSIGN       reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    =               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    +               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    -               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    *               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    /               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    DOTADD          reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    DOTSUB          reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    DOTMUL          reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    DOTDIV          reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    '               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    ;               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    ,               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    >               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    <               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    EQ              reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    NEQ             reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    LEQ             reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    GEQ             reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    )               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    :               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    {               reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    IF              reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    FOR             reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    WHILE           reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    RETURN          reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    BREAK           reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    CONTINUE        reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    PRINT           reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    ID              reduce using rule 72 (vector_element -> id [ INTNUM ] .)
    ]               reduce using rule 72 (vector_element -> id [ INTNUM ] .)


state 101

    (18) instr -> WHILE ( expr ) . instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instr                          shift and go to state 129
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 102

    (37) expr -> expr + expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 37 (expr -> expr + expr .)
    -               reduce using rule 37 (expr -> expr + expr .)
    ;               reduce using rule 37 (expr -> expr + expr .)
    ,               reduce using rule 37 (expr -> expr + expr .)
    >               reduce using rule 37 (expr -> expr + expr .)
    <               reduce using rule 37 (expr -> expr + expr .)
    EQ              reduce using rule 37 (expr -> expr + expr .)
    NEQ             reduce using rule 37 (expr -> expr + expr .)
    LEQ             reduce using rule 37 (expr -> expr + expr .)
    GEQ             reduce using rule 37 (expr -> expr + expr .)
    )               reduce using rule 37 (expr -> expr + expr .)
    :               reduce using rule 37 (expr -> expr + expr .)
    {               reduce using rule 37 (expr -> expr + expr .)
    IF              reduce using rule 37 (expr -> expr + expr .)
    FOR             reduce using rule 37 (expr -> expr + expr .)
    WHILE           reduce using rule 37 (expr -> expr + expr .)
    RETURN          reduce using rule 37 (expr -> expr + expr .)
    BREAK           reduce using rule 37 (expr -> expr + expr .)
    CONTINUE        reduce using rule 37 (expr -> expr + expr .)
    PRINT           reduce using rule 37 (expr -> expr + expr .)
    ID              reduce using rule 37 (expr -> expr + expr .)
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! *               [ reduce using rule 37 (expr -> expr + expr .) ]
  ! /               [ reduce using rule 37 (expr -> expr + expr .) ]
  ! DOTADD          [ reduce using rule 37 (expr -> expr + expr .) ]
  ! DOTSUB          [ reduce using rule 37 (expr -> expr + expr .) ]
  ! DOTMUL          [ reduce using rule 37 (expr -> expr + expr .) ]
  ! DOTDIV          [ reduce using rule 37 (expr -> expr + expr .) ]
  ! '               [ reduce using rule 37 (expr -> expr + expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]


state 103

    (38) expr -> expr - expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 38 (expr -> expr - expr .)
    -               reduce using rule 38 (expr -> expr - expr .)
    ;               reduce using rule 38 (expr -> expr - expr .)
    ,               reduce using rule 38 (expr -> expr - expr .)
    >               reduce using rule 38 (expr -> expr - expr .)
    <               reduce using rule 38 (expr -> expr - expr .)
    EQ              reduce using rule 38 (expr -> expr - expr .)
    NEQ             reduce using rule 38 (expr -> expr - expr .)
    LEQ             reduce using rule 38 (expr -> expr - expr .)
    GEQ             reduce using rule 38 (expr -> expr - expr .)
    )               reduce using rule 38 (expr -> expr - expr .)
    :               reduce using rule 38 (expr -> expr - expr .)
    {               reduce using rule 38 (expr -> expr - expr .)
    IF              reduce using rule 38 (expr -> expr - expr .)
    FOR             reduce using rule 38 (expr -> expr - expr .)
    WHILE           reduce using rule 38 (expr -> expr - expr .)
    RETURN          reduce using rule 38 (expr -> expr - expr .)
    BREAK           reduce using rule 38 (expr -> expr - expr .)
    CONTINUE        reduce using rule 38 (expr -> expr - expr .)
    PRINT           reduce using rule 38 (expr -> expr - expr .)
    ID              reduce using rule 38 (expr -> expr - expr .)
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! *               [ reduce using rule 38 (expr -> expr - expr .) ]
  ! /               [ reduce using rule 38 (expr -> expr - expr .) ]
  ! DOTADD          [ reduce using rule 38 (expr -> expr - expr .) ]
  ! DOTSUB          [ reduce using rule 38 (expr -> expr - expr .) ]
  ! DOTMUL          [ reduce using rule 38 (expr -> expr - expr .) ]
  ! DOTDIV          [ reduce using rule 38 (expr -> expr - expr .) ]
  ! '               [ reduce using rule 38 (expr -> expr - expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]


state 104

    (39) expr -> expr * expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 39 (expr -> expr * expr .)
    -               reduce using rule 39 (expr -> expr * expr .)
    *               reduce using rule 39 (expr -> expr * expr .)
    /               reduce using rule 39 (expr -> expr * expr .)
    DOTADD          reduce using rule 39 (expr -> expr * expr .)
    DOTSUB          reduce using rule 39 (expr -> expr * expr .)
    ;               reduce using rule 39 (expr -> expr * expr .)
    ,               reduce using rule 39 (expr -> expr * expr .)
    >               reduce using rule 39 (expr -> expr * expr .)
    <               reduce using rule 39 (expr -> expr * expr .)
    EQ              reduce using rule 39 (expr -> expr * expr .)
    NEQ             reduce using rule 39 (expr -> expr * expr .)
    LEQ             reduce using rule 39 (expr -> expr * expr .)
    GEQ             reduce using rule 39 (expr -> expr * expr .)
    )               reduce using rule 39 (expr -> expr * expr .)
    :               reduce using rule 39 (expr -> expr * expr .)
    {               reduce using rule 39 (expr -> expr * expr .)
    IF              reduce using rule 39 (expr -> expr * expr .)
    FOR             reduce using rule 39 (expr -> expr * expr .)
    WHILE           reduce using rule 39 (expr -> expr * expr .)
    RETURN          reduce using rule 39 (expr -> expr * expr .)
    BREAK           reduce using rule 39 (expr -> expr * expr .)
    CONTINUE        reduce using rule 39 (expr -> expr * expr .)
    PRINT           reduce using rule 39 (expr -> expr * expr .)
    ID              reduce using rule 39 (expr -> expr * expr .)
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! DOTMUL          [ reduce using rule 39 (expr -> expr * expr .) ]
  ! DOTDIV          [ reduce using rule 39 (expr -> expr * expr .) ]
  ! '               [ reduce using rule 39 (expr -> expr * expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 69 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]


state 105

    (40) expr -> expr / expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 40 (expr -> expr / expr .)
    -               reduce using rule 40 (expr -> expr / expr .)
    *               reduce using rule 40 (expr -> expr / expr .)
    /               reduce using rule 40 (expr -> expr / expr .)
    DOTADD          reduce using rule 40 (expr -> expr / expr .)
    DOTSUB          reduce using rule 40 (expr -> expr / expr .)
    ;               reduce using rule 40 (expr -> expr / expr .)
    ,               reduce using rule 40 (expr -> expr / expr .)
    >               reduce using rule 40 (expr -> expr / expr .)
    <               reduce using rule 40 (expr -> expr / expr .)
    EQ              reduce using rule 40 (expr -> expr / expr .)
    NEQ             reduce using rule 40 (expr -> expr / expr .)
    LEQ             reduce using rule 40 (expr -> expr / expr .)
    GEQ             reduce using rule 40 (expr -> expr / expr .)
    )               reduce using rule 40 (expr -> expr / expr .)
    :               reduce using rule 40 (expr -> expr / expr .)
    {               reduce using rule 40 (expr -> expr / expr .)
    IF              reduce using rule 40 (expr -> expr / expr .)
    FOR             reduce using rule 40 (expr -> expr / expr .)
    WHILE           reduce using rule 40 (expr -> expr / expr .)
    RETURN          reduce using rule 40 (expr -> expr / expr .)
    BREAK           reduce using rule 40 (expr -> expr / expr .)
    CONTINUE        reduce using rule 40 (expr -> expr / expr .)
    PRINT           reduce using rule 40 (expr -> expr / expr .)
    ID              reduce using rule 40 (expr -> expr / expr .)
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! DOTMUL          [ reduce using rule 40 (expr -> expr / expr .) ]
  ! DOTDIV          [ reduce using rule 40 (expr -> expr / expr .) ]
  ! '               [ reduce using rule 40 (expr -> expr / expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 69 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]


state 106

    (41) expr -> expr DOTADD expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 41 (expr -> expr DOTADD expr .)
    -               reduce using rule 41 (expr -> expr DOTADD expr .)
    DOTADD          reduce using rule 41 (expr -> expr DOTADD expr .)
    DOTSUB          reduce using rule 41 (expr -> expr DOTADD expr .)
    ;               reduce using rule 41 (expr -> expr DOTADD expr .)
    ,               reduce using rule 41 (expr -> expr DOTADD expr .)
    >               reduce using rule 41 (expr -> expr DOTADD expr .)
    <               reduce using rule 41 (expr -> expr DOTADD expr .)
    EQ              reduce using rule 41 (expr -> expr DOTADD expr .)
    NEQ             reduce using rule 41 (expr -> expr DOTADD expr .)
    LEQ             reduce using rule 41 (expr -> expr DOTADD expr .)
    GEQ             reduce using rule 41 (expr -> expr DOTADD expr .)
    )               reduce using rule 41 (expr -> expr DOTADD expr .)
    :               reduce using rule 41 (expr -> expr DOTADD expr .)
    {               reduce using rule 41 (expr -> expr DOTADD expr .)
    IF              reduce using rule 41 (expr -> expr DOTADD expr .)
    FOR             reduce using rule 41 (expr -> expr DOTADD expr .)
    WHILE           reduce using rule 41 (expr -> expr DOTADD expr .)
    RETURN          reduce using rule 41 (expr -> expr DOTADD expr .)
    BREAK           reduce using rule 41 (expr -> expr DOTADD expr .)
    CONTINUE        reduce using rule 41 (expr -> expr DOTADD expr .)
    PRINT           reduce using rule 41 (expr -> expr DOTADD expr .)
    ID              reduce using rule 41 (expr -> expr DOTADD expr .)
    *               shift and go to state 68
    /               shift and go to state 69
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! *               [ reduce using rule 41 (expr -> expr DOTADD expr .) ]
  ! /               [ reduce using rule 41 (expr -> expr DOTADD expr .) ]
  ! DOTMUL          [ reduce using rule 41 (expr -> expr DOTADD expr .) ]
  ! DOTDIV          [ reduce using rule 41 (expr -> expr DOTADD expr .) ]
  ! '               [ reduce using rule 41 (expr -> expr DOTADD expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]


state 107

    (42) expr -> expr DOTSUB expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 42 (expr -> expr DOTSUB expr .)
    -               reduce using rule 42 (expr -> expr DOTSUB expr .)
    DOTADD          reduce using rule 42 (expr -> expr DOTSUB expr .)
    DOTSUB          reduce using rule 42 (expr -> expr DOTSUB expr .)
    ;               reduce using rule 42 (expr -> expr DOTSUB expr .)
    ,               reduce using rule 42 (expr -> expr DOTSUB expr .)
    >               reduce using rule 42 (expr -> expr DOTSUB expr .)
    <               reduce using rule 42 (expr -> expr DOTSUB expr .)
    EQ              reduce using rule 42 (expr -> expr DOTSUB expr .)
    NEQ             reduce using rule 42 (expr -> expr DOTSUB expr .)
    LEQ             reduce using rule 42 (expr -> expr DOTSUB expr .)
    GEQ             reduce using rule 42 (expr -> expr DOTSUB expr .)
    )               reduce using rule 42 (expr -> expr DOTSUB expr .)
    :               reduce using rule 42 (expr -> expr DOTSUB expr .)
    {               reduce using rule 42 (expr -> expr DOTSUB expr .)
    IF              reduce using rule 42 (expr -> expr DOTSUB expr .)
    FOR             reduce using rule 42 (expr -> expr DOTSUB expr .)
    WHILE           reduce using rule 42 (expr -> expr DOTSUB expr .)
    RETURN          reduce using rule 42 (expr -> expr DOTSUB expr .)
    BREAK           reduce using rule 42 (expr -> expr DOTSUB expr .)
    CONTINUE        reduce using rule 42 (expr -> expr DOTSUB expr .)
    PRINT           reduce using rule 42 (expr -> expr DOTSUB expr .)
    ID              reduce using rule 42 (expr -> expr DOTSUB expr .)
    *               shift and go to state 68
    /               shift and go to state 69
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74

  ! *               [ reduce using rule 42 (expr -> expr DOTSUB expr .) ]
  ! /               [ reduce using rule 42 (expr -> expr DOTSUB expr .) ]
  ! DOTMUL          [ reduce using rule 42 (expr -> expr DOTSUB expr .) ]
  ! DOTDIV          [ reduce using rule 42 (expr -> expr DOTSUB expr .) ]
  ! '               [ reduce using rule 42 (expr -> expr DOTSUB expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]


state 108

    (43) expr -> expr DOTMUL expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 43 (expr -> expr DOTMUL expr .)
    -               reduce using rule 43 (expr -> expr DOTMUL expr .)
    *               reduce using rule 43 (expr -> expr DOTMUL expr .)
    /               reduce using rule 43 (expr -> expr DOTMUL expr .)
    DOTADD          reduce using rule 43 (expr -> expr DOTMUL expr .)
    DOTSUB          reduce using rule 43 (expr -> expr DOTMUL expr .)
    DOTMUL          reduce using rule 43 (expr -> expr DOTMUL expr .)
    DOTDIV          reduce using rule 43 (expr -> expr DOTMUL expr .)
    ;               reduce using rule 43 (expr -> expr DOTMUL expr .)
    ,               reduce using rule 43 (expr -> expr DOTMUL expr .)
    >               reduce using rule 43 (expr -> expr DOTMUL expr .)
    <               reduce using rule 43 (expr -> expr DOTMUL expr .)
    EQ              reduce using rule 43 (expr -> expr DOTMUL expr .)
    NEQ             reduce using rule 43 (expr -> expr DOTMUL expr .)
    LEQ             reduce using rule 43 (expr -> expr DOTMUL expr .)
    GEQ             reduce using rule 43 (expr -> expr DOTMUL expr .)
    )               reduce using rule 43 (expr -> expr DOTMUL expr .)
    :               reduce using rule 43 (expr -> expr DOTMUL expr .)
    {               reduce using rule 43 (expr -> expr DOTMUL expr .)
    IF              reduce using rule 43 (expr -> expr DOTMUL expr .)
    FOR             reduce using rule 43 (expr -> expr DOTMUL expr .)
    WHILE           reduce using rule 43 (expr -> expr DOTMUL expr .)
    RETURN          reduce using rule 43 (expr -> expr DOTMUL expr .)
    BREAK           reduce using rule 43 (expr -> expr DOTMUL expr .)
    CONTINUE        reduce using rule 43 (expr -> expr DOTMUL expr .)
    PRINT           reduce using rule 43 (expr -> expr DOTMUL expr .)
    ID              reduce using rule 43 (expr -> expr DOTMUL expr .)
    '               shift and go to state 74

  ! '               [ reduce using rule 43 (expr -> expr DOTMUL expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 69 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]
  ! DOTMUL          [ shift and go to state 72 ]
  ! DOTDIV          [ shift and go to state 73 ]


state 109

    (44) expr -> expr DOTDIV expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    +               reduce using rule 44 (expr -> expr DOTDIV expr .)
    -               reduce using rule 44 (expr -> expr DOTDIV expr .)
    *               reduce using rule 44 (expr -> expr DOTDIV expr .)
    /               reduce using rule 44 (expr -> expr DOTDIV expr .)
    DOTADD          reduce using rule 44 (expr -> expr DOTDIV expr .)
    DOTSUB          reduce using rule 44 (expr -> expr DOTDIV expr .)
    DOTMUL          reduce using rule 44 (expr -> expr DOTDIV expr .)
    DOTDIV          reduce using rule 44 (expr -> expr DOTDIV expr .)
    ;               reduce using rule 44 (expr -> expr DOTDIV expr .)
    ,               reduce using rule 44 (expr -> expr DOTDIV expr .)
    >               reduce using rule 44 (expr -> expr DOTDIV expr .)
    <               reduce using rule 44 (expr -> expr DOTDIV expr .)
    EQ              reduce using rule 44 (expr -> expr DOTDIV expr .)
    NEQ             reduce using rule 44 (expr -> expr DOTDIV expr .)
    LEQ             reduce using rule 44 (expr -> expr DOTDIV expr .)
    GEQ             reduce using rule 44 (expr -> expr DOTDIV expr .)
    )               reduce using rule 44 (expr -> expr DOTDIV expr .)
    :               reduce using rule 44 (expr -> expr DOTDIV expr .)
    {               reduce using rule 44 (expr -> expr DOTDIV expr .)
    IF              reduce using rule 44 (expr -> expr DOTDIV expr .)
    FOR             reduce using rule 44 (expr -> expr DOTDIV expr .)
    WHILE           reduce using rule 44 (expr -> expr DOTDIV expr .)
    RETURN          reduce using rule 44 (expr -> expr DOTDIV expr .)
    BREAK           reduce using rule 44 (expr -> expr DOTDIV expr .)
    CONTINUE        reduce using rule 44 (expr -> expr DOTDIV expr .)
    PRINT           reduce using rule 44 (expr -> expr DOTDIV expr .)
    ID              reduce using rule 44 (expr -> expr DOTDIV expr .)
    '               shift and go to state 74

  ! '               [ reduce using rule 44 (expr -> expr DOTDIV expr .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 67 ]
  ! *               [ shift and go to state 68 ]
  ! /               [ shift and go to state 69 ]
  ! DOTADD          [ shift and go to state 70 ]
  ! DOTSUB          [ shift and go to state 71 ]
  ! DOTMUL          [ shift and go to state 72 ]
  ! DOTDIV          [ shift and go to state 73 ]


state 110

    (56) matrix -> [ vectors ] .

    +               reduce using rule 56 (matrix -> [ vectors ] .)
    -               reduce using rule 56 (matrix -> [ vectors ] .)
    *               reduce using rule 56 (matrix -> [ vectors ] .)
    /               reduce using rule 56 (matrix -> [ vectors ] .)
    DOTADD          reduce using rule 56 (matrix -> [ vectors ] .)
    DOTSUB          reduce using rule 56 (matrix -> [ vectors ] .)
    DOTMUL          reduce using rule 56 (matrix -> [ vectors ] .)
    DOTDIV          reduce using rule 56 (matrix -> [ vectors ] .)
    '               reduce using rule 56 (matrix -> [ vectors ] .)
    ;               reduce using rule 56 (matrix -> [ vectors ] .)
    ,               reduce using rule 56 (matrix -> [ vectors ] .)
    >               reduce using rule 56 (matrix -> [ vectors ] .)
    <               reduce using rule 56 (matrix -> [ vectors ] .)
    EQ              reduce using rule 56 (matrix -> [ vectors ] .)
    NEQ             reduce using rule 56 (matrix -> [ vectors ] .)
    LEQ             reduce using rule 56 (matrix -> [ vectors ] .)
    GEQ             reduce using rule 56 (matrix -> [ vectors ] .)
    )               reduce using rule 56 (matrix -> [ vectors ] .)
    :               reduce using rule 56 (matrix -> [ vectors ] .)
    {               reduce using rule 56 (matrix -> [ vectors ] .)
    IF              reduce using rule 56 (matrix -> [ vectors ] .)
    FOR             reduce using rule 56 (matrix -> [ vectors ] .)
    WHILE           reduce using rule 56 (matrix -> [ vectors ] .)
    RETURN          reduce using rule 56 (matrix -> [ vectors ] .)
    BREAK           reduce using rule 56 (matrix -> [ vectors ] .)
    CONTINUE        reduce using rule 56 (matrix -> [ vectors ] .)
    PRINT           reduce using rule 56 (matrix -> [ vectors ] .)
    ID              reduce using rule 56 (matrix -> [ vectors ] .)


state 111

    (60) vectors -> vectors , . vector
    (62) vector -> . [ variables ]

    [               shift and go to state 76

    vector                         shift and go to state 130

state 112

    (62) vector -> [ variables ] .

    +               reduce using rule 62 (vector -> [ variables ] .)
    -               reduce using rule 62 (vector -> [ variables ] .)
    *               reduce using rule 62 (vector -> [ variables ] .)
    /               reduce using rule 62 (vector -> [ variables ] .)
    DOTADD          reduce using rule 62 (vector -> [ variables ] .)
    DOTSUB          reduce using rule 62 (vector -> [ variables ] .)
    DOTMUL          reduce using rule 62 (vector -> [ variables ] .)
    DOTDIV          reduce using rule 62 (vector -> [ variables ] .)
    '               reduce using rule 62 (vector -> [ variables ] .)
    ;               reduce using rule 62 (vector -> [ variables ] .)
    ,               reduce using rule 62 (vector -> [ variables ] .)
    >               reduce using rule 62 (vector -> [ variables ] .)
    <               reduce using rule 62 (vector -> [ variables ] .)
    EQ              reduce using rule 62 (vector -> [ variables ] .)
    NEQ             reduce using rule 62 (vector -> [ variables ] .)
    LEQ             reduce using rule 62 (vector -> [ variables ] .)
    GEQ             reduce using rule 62 (vector -> [ variables ] .)
    )               reduce using rule 62 (vector -> [ variables ] .)
    :               reduce using rule 62 (vector -> [ variables ] .)
    {               reduce using rule 62 (vector -> [ variables ] .)
    IF              reduce using rule 62 (vector -> [ variables ] .)
    FOR             reduce using rule 62 (vector -> [ variables ] .)
    WHILE           reduce using rule 62 (vector -> [ variables ] .)
    RETURN          reduce using rule 62 (vector -> [ variables ] .)
    BREAK           reduce using rule 62 (vector -> [ variables ] .)
    CONTINUE        reduce using rule 62 (vector -> [ variables ] .)
    PRINT           reduce using rule 62 (vector -> [ variables ] .)
    ID              reduce using rule 62 (vector -> [ variables ] .)
    ]               reduce using rule 62 (vector -> [ variables ] .)


state 113

    (63) variables -> variables , . variable
    (65) variable -> . number
    (66) variable -> . id
    (67) variable -> . element
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (34) id -> . ID
    (70) element -> . vector_element
    (71) element -> . matrix_element
    (72) vector_element -> . id [ INTNUM ]
    (73) matrix_element -> . id [ INTNUM , INTNUM ]

    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    ID              shift and go to state 17

    variable                       shift and go to state 131
    number                         shift and go to state 81
    id                             shift and go to state 82
    element                        shift and go to state 83
    vector_element                 shift and go to state 84
    matrix_element                 shift and go to state 85

state 114

    (72) vector_element -> id [ . INTNUM ]
    (73) matrix_element -> id [ . INTNUM , INTNUM ]

    INTNUM          shift and go to state 132


state 115

    (57) matrix_create -> ZEROS ( INTNUM . )

    )               shift and go to state 133


state 116

    (58) matrix_create -> ONES ( INTNUM . )

    )               shift and go to state 134


state 117

    (59) matrix_create -> EYE ( INTNUM . )

    )               shift and go to state 135


state 118

    (24) printables -> printables , printable .

    ,               reduce using rule 24 (printables -> printables , printable .)
    ;               reduce using rule 24 (printables -> printables , printable .)


state 119

    (7) instr -> IF ( condition ) instr .
    (8) instr -> IF ( condition ) instr . ELSE instr

    {               reduce using rule 7 (instr -> IF ( condition ) instr .)
    IF              reduce using rule 7 (instr -> IF ( condition ) instr .)
    FOR             reduce using rule 7 (instr -> IF ( condition ) instr .)
    WHILE           reduce using rule 7 (instr -> IF ( condition ) instr .)
    RETURN          reduce using rule 7 (instr -> IF ( condition ) instr .)
    BREAK           reduce using rule 7 (instr -> IF ( condition ) instr .)
    CONTINUE        reduce using rule 7 (instr -> IF ( condition ) instr .)
    PRINT           reduce using rule 7 (instr -> IF ( condition ) instr .)
    ID              reduce using rule 7 (instr -> IF ( condition ) instr .)
    $end            reduce using rule 7 (instr -> IF ( condition ) instr .)
    }               reduce using rule 7 (instr -> IF ( condition ) instr .)
    ELSE            shift and go to state 136

  ! ELSE            [ reduce using rule 7 (instr -> IF ( condition ) instr .) ]


state 120

    (10) condition -> expr > expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 10 (condition -> expr > expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 121

    (11) condition -> expr < expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 11 (condition -> expr < expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 122

    (12) condition -> expr EQ expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 12 (condition -> expr EQ expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 123

    (13) condition -> expr NEQ expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 13 (condition -> expr NEQ expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 124

    (14) condition -> expr LEQ expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 14 (condition -> expr LEQ expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 125

    (15) condition -> expr GEQ expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    )               reduce using rule 15 (condition -> expr GEQ expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 126

    (16) instr -> FOR id = range instr .

    {               reduce using rule 16 (instr -> FOR id = range instr .)
    IF              reduce using rule 16 (instr -> FOR id = range instr .)
    FOR             reduce using rule 16 (instr -> FOR id = range instr .)
    WHILE           reduce using rule 16 (instr -> FOR id = range instr .)
    RETURN          reduce using rule 16 (instr -> FOR id = range instr .)
    BREAK           reduce using rule 16 (instr -> FOR id = range instr .)
    CONTINUE        reduce using rule 16 (instr -> FOR id = range instr .)
    PRINT           reduce using rule 16 (instr -> FOR id = range instr .)
    ID              reduce using rule 16 (instr -> FOR id = range instr .)
    $end            reduce using rule 16 (instr -> FOR id = range instr .)
    }               reduce using rule 16 (instr -> FOR id = range instr .)
    ELSE            reduce using rule 16 (instr -> FOR id = range instr .)


state 127

    (17) range -> expr : . expr
    (37) expr -> . expr + expr
    (38) expr -> . expr - expr
    (39) expr -> . expr * expr
    (40) expr -> . expr / expr
    (41) expr -> . expr DOTADD expr
    (42) expr -> . expr DOTSUB expr
    (43) expr -> . expr DOTMUL expr
    (44) expr -> . expr DOTDIV expr
    (45) expr -> . num_expr
    (46) expr -> . matrix
    (47) expr -> . matrix_create
    (48) expr -> . vector
    (49) expr -> . uminus
    (50) expr -> . trans
    (51) expr -> . matrix_element
    (52) expr -> . vector_element
    (53) num_expr -> . number
    (54) num_expr -> . str
    (55) num_expr -> . id
    (56) matrix -> . [ vectors ]
    (57) matrix_create -> . ZEROS ( INTNUM )
    (58) matrix_create -> . ONES ( INTNUM )
    (59) matrix_create -> . EYE ( INTNUM )
    (62) vector -> . [ variables ]
    (36) uminus -> . - expr
    (35) trans -> . expr '
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]
    (68) number -> . INTNUM
    (69) number -> . FLOAT
    (21) str -> . STRING
    (34) id -> . ID

    [               shift and go to state 47
    ZEROS           shift and go to state 48
    ONES            shift and go to state 50
    EYE             shift and go to state 51
    -               shift and go to state 35
    INTNUM          shift and go to state 49
    FLOAT           shift and go to state 52
    STRING          shift and go to state 53
    ID              shift and go to state 17

    expr                           shift and go to state 137
    num_expr                       shift and go to state 36
    matrix                         shift and go to state 37
    matrix_create                  shift and go to state 38
    vector                         shift and go to state 39
    uminus                         shift and go to state 40
    trans                          shift and go to state 41
    matrix_element                 shift and go to state 42
    vector_element                 shift and go to state 43
    number                         shift and go to state 44
    str                            shift and go to state 45
    id                             shift and go to state 46

state 128

    (73) matrix_element -> id [ INTNUM , INTNUM . ]

    ]               shift and go to state 138


state 129

    (18) instr -> WHILE ( expr ) instr .

    {               reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    IF              reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    FOR             reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    WHILE           reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    RETURN          reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    BREAK           reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    CONTINUE        reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    PRINT           reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    ID              reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    $end            reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    }               reduce using rule 18 (instr -> WHILE ( expr ) instr .)
    ELSE            reduce using rule 18 (instr -> WHILE ( expr ) instr .)


state 130

    (60) vectors -> vectors , vector .

    ]               reduce using rule 60 (vectors -> vectors , vector .)
    ,               reduce using rule 60 (vectors -> vectors , vector .)


state 131

    (63) variables -> variables , variable .

    ]               reduce using rule 63 (variables -> variables , variable .)
    ,               reduce using rule 63 (variables -> variables , variable .)


state 132

    (72) vector_element -> id [ INTNUM . ]
    (73) matrix_element -> id [ INTNUM . , INTNUM ]

    ]               shift and go to state 100
    ,               shift and go to state 99


state 133

    (57) matrix_create -> ZEROS ( INTNUM ) .

    +               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    -               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    *               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    /               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    DOTADD          reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    DOTSUB          reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    DOTMUL          reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    DOTDIV          reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    '               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    ;               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    ,               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    >               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    <               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    EQ              reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    NEQ             reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    LEQ             reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    GEQ             reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    )               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    :               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    {               reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    IF              reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    FOR             reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    WHILE           reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    RETURN          reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    BREAK           reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    CONTINUE        reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    PRINT           reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)
    ID              reduce using rule 57 (matrix_create -> ZEROS ( INTNUM ) .)


state 134

    (58) matrix_create -> ONES ( INTNUM ) .

    +               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    -               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    *               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    /               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    DOTADD          reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    DOTSUB          reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    DOTMUL          reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    DOTDIV          reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    '               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    ;               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    ,               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    >               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    <               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    EQ              reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    NEQ             reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    LEQ             reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    GEQ             reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    )               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    :               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    {               reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    IF              reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    FOR             reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    WHILE           reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    RETURN          reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    BREAK           reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    CONTINUE        reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    PRINT           reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)
    ID              reduce using rule 58 (matrix_create -> ONES ( INTNUM ) .)


state 135

    (59) matrix_create -> EYE ( INTNUM ) .

    +               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    -               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    *               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    /               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    DOTADD          reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    DOTSUB          reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    DOTMUL          reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    DOTDIV          reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    '               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    ;               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    ,               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    >               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    <               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    EQ              reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    NEQ             reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    LEQ             reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    GEQ             reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    )               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    :               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    {               reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    IF              reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    FOR             reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    WHILE           reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    RETURN          reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    BREAK           reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    CONTINUE        reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    PRINT           reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)
    ID              reduce using rule 59 (matrix_create -> EYE ( INTNUM ) .)


state 136

    (8) instr -> IF ( condition ) instr ELSE . instr
    (4) instr -> . instr_assign ;
    (5) instr -> . statement ;
    (6) instr -> . { instructions }
    (7) instr -> . IF ( condition ) instr
    (8) instr -> . IF ( condition ) instr ELSE instr
    (16) instr -> . FOR id = range instr
    (18) instr -> . WHILE ( expr ) instr
    (31) instr_assign -> . id assign_operator expr
    (32) instr_assign -> . matrix_element assign_operator expr
    (33) instr_assign -> . vector_element assign_operator expr
    (9) statement -> . RETURN expr
    (19) statement -> . BREAK
    (20) statement -> . CONTINUE
    (22) statement -> . PRINT printables
    (34) id -> . ID
    (73) matrix_element -> . id [ INTNUM , INTNUM ]
    (72) vector_element -> . id [ INTNUM ]

    {               shift and go to state 6
    IF              shift and go to state 7
    FOR             shift and go to state 8
    WHILE           shift and go to state 10
    RETURN          shift and go to state 13
    BREAK           shift and go to state 14
    CONTINUE        shift and go to state 15
    PRINT           shift and go to state 16
    ID              shift and go to state 17

    instr                          shift and go to state 139
    instr_assign                   shift and go to state 4
    statement                      shift and go to state 5
    id                             shift and go to state 9
    matrix_element                 shift and go to state 11
    vector_element                 shift and go to state 12

state 137

    (17) range -> expr : expr .
    (37) expr -> expr . + expr
    (38) expr -> expr . - expr
    (39) expr -> expr . * expr
    (40) expr -> expr . / expr
    (41) expr -> expr . DOTADD expr
    (42) expr -> expr . DOTSUB expr
    (43) expr -> expr . DOTMUL expr
    (44) expr -> expr . DOTDIV expr
    (35) trans -> expr . '

    {               reduce using rule 17 (range -> expr : expr .)
    IF              reduce using rule 17 (range -> expr : expr .)
    FOR             reduce using rule 17 (range -> expr : expr .)
    WHILE           reduce using rule 17 (range -> expr : expr .)
    RETURN          reduce using rule 17 (range -> expr : expr .)
    BREAK           reduce using rule 17 (range -> expr : expr .)
    CONTINUE        reduce using rule 17 (range -> expr : expr .)
    PRINT           reduce using rule 17 (range -> expr : expr .)
    ID              reduce using rule 17 (range -> expr : expr .)
    +               shift and go to state 66
    -               shift and go to state 67
    *               shift and go to state 68
    /               shift and go to state 69
    DOTADD          shift and go to state 70
    DOTSUB          shift and go to state 71
    DOTMUL          shift and go to state 72
    DOTDIV          shift and go to state 73
    '               shift and go to state 74


state 138

    (73) matrix_element -> id [ INTNUM , INTNUM ] .

    ADDASSIGN       reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    SUBASSIGN       reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    MULASSIGN       reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DIVASSIGN       reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    =               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    +               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    -               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    *               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    /               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTADD          reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTSUB          reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTMUL          reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    DOTDIV          reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    '               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ;               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ,               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    >               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    <               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    EQ              reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    NEQ             reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    LEQ             reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    GEQ             reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    )               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    :               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    {               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    IF              reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    FOR             reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    WHILE           reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    RETURN          reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    BREAK           reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    CONTINUE        reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    PRINT           reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ID              reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)
    ]               reduce using rule 73 (matrix_element -> id [ INTNUM , INTNUM ] .)


state 139

    (8) instr -> IF ( condition ) instr ELSE instr .

    {               reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    IF              reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    FOR             reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    WHILE           reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    RETURN          reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    BREAK           reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    CONTINUE        reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    PRINT           reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    ID              reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    $end            reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    }               reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)
    ELSE            reduce using rule 8 (instr -> IF ( condition ) instr ELSE instr .)

