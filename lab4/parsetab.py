
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFnonassocELSErightMULASSIGNDIVASSIGNSUBASSIGNADDASSIGNnonassoc<>GEQLEQEQNEQleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQ EYE FLOAT FOR GEQ ID IF INTNUM LEQ MULASSIGN NEQ ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSstart : instructions instructions : instr\n                    | instructions instr instr : instr_assign \';\'\n                | statement \';\'\n                | \'{\' instructions \'}\'\n                 instr : IF \'(\' condition \')\' instr %prec IF instr : IF \'(\' condition \')\' instr ELSE instr statement : RETURN exprcondition : expr \'>\' expr\n            | expr \'<\' expr\n            | expr EQ expr\n            | expr NEQ expr\n            | expr LEQ expr\n            | expr GEQ expr  instr : FOR id \'=\' range instrrange : expr \':\' expr  instr : WHILE \'(\' expr \')\' instrstatement : BREAKstatement : CONTINUEstr : STRING statement : PRINT printables printables : printable\n                | printables \',\' printable printable : exprassign_operator : ADDASSIGN\n                    | SUBASSIGN\n                    | MULASSIGN\n                    | DIVASSIGN\n                    | \'=\' \n                     instr_assign : id assign_operator expr\n                | matrix_element assign_operator expr\n                | vector_element assign_operator expr\n    id : IDtrans : expr \'\\\'\'uminus : "-" expr %prec UMINUSexpr : expr \'+\' expr\n            | expr \'-\' expr\n            | expr \'*\' expr\n            | expr \'/\' expr\n            | expr DOTADD expr\n            | expr DOTSUB expr\n            | expr DOTMUL expr\n            | expr DOTDIV expr\n            expr : num_expr\n            | matrix \n            | matrix_create\n            | vector\n            | uminus\n            | trans\n            | matrix_element\n            | vector_element num_expr : number\n                | str\n                | id matrix : \'[\' vectors \']\' matrix_create : ZEROS \'(\' INTNUM \')\'\n                            | ONES \'(\' INTNUM \')\'\n                            | EYE \'(\' INTNUM \')\'vectors : vectors \',\' vector\n               | vector vector : \'[\' variables \']\' variables : variables \',\' variable\n                 | variable variable : number\n                | id\n                | element  number : INTNUM\n            | FLOAT element : vector_element \n                | matrix_element vector_element : id "[" INTNUM "]"  matrix_element : id "[" INTNUM "," INTNUM "]" '
    
_lr_action_items = {'{':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[6,6,-2,6,-34,-3,-4,-5,6,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,6,6,-72,6,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,6,-17,-73,-8,]),'IF':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[7,7,-2,7,-34,-3,-4,-5,7,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,7,7,-72,7,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,7,-17,-73,-8,]),'FOR':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[8,8,-2,8,-34,-3,-4,-5,8,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,8,8,-72,8,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,8,-17,-73,-8,]),'WHILE':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[10,10,-2,10,-34,-3,-4,-5,10,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,10,10,-72,10,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,10,-17,-73,-8,]),'RETURN':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[13,13,-2,13,-34,-3,-4,-5,13,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,13,13,-72,13,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,13,-17,-73,-8,]),'BREAK':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[14,14,-2,14,-34,-3,-4,-5,14,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,14,14,-72,14,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,14,-17,-73,-8,]),'CONTINUE':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[15,15,-2,15,-34,-3,-4,-5,15,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,15,15,-72,15,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,15,-17,-73,-8,]),'PRINT':([0,2,3,6,17,18,19,20,21,36,37,38,39,40,41,42,43,44,45,46,49,52,53,57,74,75,90,97,100,101,102,103,104,105,106,107,108,109,110,112,119,126,129,133,134,135,136,137,138,139,],[16,16,-2,16,-34,-3,-4,-5,16,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-6,-35,-36,16,16,-72,16,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-7,-16,-18,-57,-58,-59,16,-17,-73,-8,]),'ID':([0,2,3,6,8,13,16,17,18,19,20,21,22,24,26,27,28,29,30,31,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,49,52,53,57,60,66,67,68,69,70,71,72,73,74,75,76,89,90,91,92,93,94,95,96,97,100,101,102,103,104,105,106,107,108,109,110,112,113,119,126,127,129,133,134,135,136,137,138,139,],[17,17,-2,17,17,17,17,-34,-3,-4,-5,17,17,17,-26,-27,-28,-29,-30,17,17,17,17,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,17,-68,-69,-21,-6,17,17,17,17,17,17,17,17,17,-35,-36,17,17,17,17,17,17,17,17,17,17,-72,17,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,17,-7,-16,17,-18,-57,-58,-59,17,-17,-73,-8,]),'$end':([1,2,3,18,19,20,57,119,126,129,139,],[0,-1,-2,-3,-4,-5,-6,-7,-16,-18,-8,]),'}':([3,18,19,20,21,57,119,126,129,139,],[-2,-3,-4,-5,57,-6,-7,-16,-18,-8,]),';':([4,5,14,15,17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,54,55,56,61,64,65,74,75,100,102,103,104,105,106,107,108,109,110,112,118,133,134,135,138,],[19,20,-19,-20,-34,-9,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-22,-23,-25,-31,-32,-33,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-24,-57,-58,-59,-73,]),'(':([7,10,48,50,51,],[22,31,86,87,88,]),'[':([9,13,16,17,22,24,26,27,28,29,30,31,32,33,35,46,47,60,66,67,68,69,70,71,72,73,82,89,91,92,93,94,95,96,111,127,],[25,47,47,-34,47,47,-26,-27,-28,-29,-30,47,47,47,47,25,76,47,47,47,47,47,47,47,47,47,114,47,47,47,47,47,47,47,76,47,]),'ADDASSIGN':([9,11,12,17,100,138,],[26,26,26,-34,-72,-73,]),'SUBASSIGN':([9,11,12,17,100,138,],[27,27,27,-34,-72,-73,]),'MULASSIGN':([9,11,12,17,100,138,],[28,28,28,-34,-72,-73,]),'DIVASSIGN':([9,11,12,17,100,138,],[29,29,29,-34,-72,-73,]),'=':([9,11,12,17,23,100,138,],[30,30,30,-34,60,-72,-73,]),'ZEROS':([13,16,22,24,26,27,28,29,30,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[48,48,48,48,-26,-27,-28,-29,-30,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'ONES':([13,16,22,24,26,27,28,29,30,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[50,50,50,50,-26,-27,-28,-29,-30,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'EYE':([13,16,22,24,26,27,28,29,30,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[51,51,51,51,-26,-27,-28,-29,-30,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'-':([13,16,17,22,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,89,91,92,93,94,95,96,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,127,133,134,135,137,138,],[35,35,-34,35,35,-26,-27,-28,-29,-30,35,35,35,67,35,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,67,67,35,67,67,67,67,35,35,35,35,35,35,35,35,-35,-36,35,35,35,35,35,35,35,67,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,67,67,67,67,67,67,35,-57,-58,-59,67,-73,]),'INTNUM':([13,16,22,24,25,26,27,28,29,30,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,86,87,88,89,91,92,93,94,95,96,99,113,114,127,],[49,49,49,49,62,-26,-27,-28,-29,-30,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,115,116,117,49,49,49,49,49,49,49,128,49,132,49,]),'FLOAT':([13,16,22,24,26,27,28,29,30,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,89,91,92,93,94,95,96,113,127,],[52,52,52,52,-26,-27,-28,-29,-30,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING':([13,16,22,24,26,27,28,29,30,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[53,53,53,53,-26,-27,-28,-29,-30,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'+':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,66,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,66,66,66,66,66,66,-35,-36,66,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,66,66,66,66,66,66,-57,-58,-59,66,-73,]),'*':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,68,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,68,68,68,68,68,68,-35,-36,68,-72,68,68,-39,-40,68,68,-43,-44,-56,-62,68,68,68,68,68,68,-57,-58,-59,68,-73,]),'/':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,69,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,69,69,69,69,69,69,-35,-36,69,-72,69,69,-39,-40,69,69,-43,-44,-56,-62,69,69,69,69,69,69,-57,-58,-59,69,-73,]),'DOTADD':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,70,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,70,70,70,70,70,70,-35,-36,70,-72,70,70,-39,-40,-41,-42,-43,-44,-56,-62,70,70,70,70,70,70,-57,-58,-59,70,-73,]),'DOTSUB':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,71,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,71,71,71,71,71,71,-35,-36,71,-72,71,71,-39,-40,-41,-42,-43,-44,-56,-62,71,71,71,71,71,71,-57,-58,-59,71,-73,]),'DOTMUL':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,72,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,72,72,72,72,72,72,-35,-36,72,-72,72,72,72,72,72,72,-43,-44,-56,-62,72,72,72,72,72,72,-57,-58,-59,72,-73,]),'DOTDIV':([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,73,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,73,73,73,73,73,73,-35,-36,73,-72,73,73,73,73,73,73,-43,-44,-56,-62,73,73,73,73,73,73,-57,-58,-59,73,-73,]),"'":([17,34,36,37,38,39,40,41,42,43,44,45,46,49,52,53,56,59,61,63,64,65,74,75,98,100,102,103,104,105,106,107,108,109,110,112,120,121,122,123,124,125,133,134,135,137,138,],[-34,74,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,74,74,74,74,74,74,-35,74,74,-72,74,74,74,74,74,74,74,74,-56,-62,74,74,74,74,74,74,-57,-58,-59,74,-73,]),',':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,54,55,56,62,74,75,77,78,79,80,81,82,83,84,85,100,102,103,104,105,106,107,108,109,110,112,118,130,131,132,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,89,-23,-25,99,-35,-36,111,113,-61,-64,-65,-66,-67,-70,-71,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-24,-60,-63,99,-57,-58,-59,-73,]),'>':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,91,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),'<':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,92,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),'EQ':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,93,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),'NEQ':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,94,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),'LEQ':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,95,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),'GEQ':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,59,74,75,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,96,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),')':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,58,63,74,75,100,102,103,104,105,106,107,108,109,110,112,115,116,117,120,121,122,123,124,125,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,90,101,-35,-36,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,133,134,135,-10,-11,-12,-13,-14,-15,-57,-58,-59,-73,]),':':([17,36,37,38,39,40,41,42,43,44,45,46,49,52,53,74,75,98,100,102,103,104,105,106,107,108,109,110,112,133,134,135,138,],[-34,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-68,-69,-21,-35,-36,127,-72,-37,-38,-39,-40,-41,-42,-43,-44,-56,-62,-57,-58,-59,-73,]),']':([17,49,52,62,77,78,79,80,81,82,83,84,85,100,112,128,130,131,132,138,],[-34,-68,-69,100,110,112,-61,-64,-65,-66,-67,-70,-71,-72,-62,138,-60,-63,100,-73,]),'ELSE':([19,20,57,119,126,129,139,],[-4,-5,-6,136,-16,-18,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'instructions':([0,6,],[2,21,]),'instr':([0,2,6,21,90,97,101,136,],[3,18,3,18,119,126,129,139,]),'instr_assign':([0,2,6,21,90,97,101,136,],[4,4,4,4,4,4,4,4,]),'statement':([0,2,6,21,90,97,101,136,],[5,5,5,5,5,5,5,5,]),'id':([0,2,6,8,13,16,21,22,24,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,89,90,91,92,93,94,95,96,97,101,113,127,136,],[9,9,9,23,46,46,9,46,46,46,46,46,46,82,46,46,46,46,46,46,46,46,46,82,46,9,46,46,46,46,46,46,9,9,82,46,9,]),'matrix_element':([0,2,6,13,16,21,22,24,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,89,90,91,92,93,94,95,96,97,101,113,127,136,],[11,11,11,42,42,11,42,42,42,42,42,42,85,42,42,42,42,42,42,42,42,42,85,42,11,42,42,42,42,42,42,11,11,85,42,11,]),'vector_element':([0,2,6,13,16,21,22,24,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,89,90,91,92,93,94,95,96,97,101,113,127,136,],[12,12,12,43,43,12,43,43,43,43,43,43,84,43,43,43,43,43,43,43,43,43,84,43,12,43,43,43,43,43,43,12,12,84,43,12,]),'assign_operator':([9,11,12,],[24,32,33,]),'expr':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[34,56,59,61,63,64,65,75,98,102,103,104,105,106,107,108,109,56,120,121,122,123,124,125,137,]),'num_expr':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'matrix':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'matrix_create':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'vector':([13,16,22,24,31,32,33,35,47,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,111,127,],[39,39,39,39,39,39,39,39,79,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,130,39,]),'uminus':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'trans':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'number':([13,16,22,24,31,32,33,35,47,60,66,67,68,69,70,71,72,73,76,89,91,92,93,94,95,96,113,127,],[44,44,44,44,44,44,44,44,81,44,44,44,44,44,44,44,44,44,81,44,44,44,44,44,44,44,81,44,]),'str':([13,16,22,24,31,32,33,35,60,66,67,68,69,70,71,72,73,89,91,92,93,94,95,96,127,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'printables':([16,],[54,]),'printable':([16,89,],[55,118,]),'condition':([22,],[58,]),'vectors':([47,],[77,]),'variables':([47,76,],[78,78,]),'variable':([47,76,113,],[80,80,131,]),'element':([47,76,113,],[83,83,83,]),'range':([60,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> instructions','start',1,'p_start','Mparser.py',32),
  ('instructions -> instr','instructions',1,'p_instructions','Mparser.py',36),
  ('instructions -> instructions instr','instructions',2,'p_instructions','Mparser.py',37),
  ('instr -> instr_assign ;','instr',2,'p_instr','Mparser.py',44),
  ('instr -> statement ;','instr',2,'p_instr','Mparser.py',45),
  ('instr -> { instructions }','instr',3,'p_instr','Mparser.py',46),
  ('instr -> IF ( condition ) instr','instr',5,'p_instr_if','Mparser.py',54),
  ('instr -> IF ( condition ) instr ELSE instr','instr',7,'p_instr_if_else','Mparser.py',58),
  ('statement -> RETURN expr','statement',2,'p_instr_return','Mparser.py',62),
  ('condition -> expr > expr','condition',3,'p_condition','Mparser.py',66),
  ('condition -> expr < expr','condition',3,'p_condition','Mparser.py',67),
  ('condition -> expr EQ expr','condition',3,'p_condition','Mparser.py',68),
  ('condition -> expr NEQ expr','condition',3,'p_condition','Mparser.py',69),
  ('condition -> expr LEQ expr','condition',3,'p_condition','Mparser.py',70),
  ('condition -> expr GEQ expr','condition',3,'p_condition','Mparser.py',71),
  ('instr -> FOR id = range instr','instr',5,'p_instr_for','Mparser.py',77),
  ('range -> expr : expr','range',3,'p_range','Mparser.py',81),
  ('instr -> WHILE ( expr ) instr','instr',5,'p_instr_while','Mparser.py',85),
  ('statement -> BREAK','statement',1,'p_break','Mparser.py',89),
  ('statement -> CONTINUE','statement',1,'p_continue','Mparser.py',93),
  ('str -> STRING','str',1,'p_str','Mparser.py',99),
  ('statement -> PRINT printables','statement',2,'p_instr_print','Mparser.py',103),
  ('printables -> printable','printables',1,'p_printables','Mparser.py',107),
  ('printables -> printables , printable','printables',3,'p_printables','Mparser.py',108),
  ('printable -> expr','printable',1,'p_printable','Mparser.py',112),
  ('assign_operator -> ADDASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',118),
  ('assign_operator -> SUBASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',119),
  ('assign_operator -> MULASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',120),
  ('assign_operator -> DIVASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',121),
  ('assign_operator -> =','assign_operator',1,'p_assign_operator','Mparser.py',122),
  ('instr_assign -> id assign_operator expr','instr_assign',3,'p_instr_assign','Mparser.py',127),
  ('instr_assign -> matrix_element assign_operator expr','instr_assign',3,'p_instr_assign','Mparser.py',128),
  ('instr_assign -> vector_element assign_operator expr','instr_assign',3,'p_instr_assign','Mparser.py',129),
  ('id -> ID','id',1,'p_id','Mparser.py',134),
  ("trans -> expr '",'trans',2,'p_trans','Mparser.py',140),
  ('uminus -> - expr','uminus',2,'p_uminus','Mparser.py',144),
  ('expr -> expr + expr','expr',3,'p_binary_expr','Mparser.py',148),
  ('expr -> expr - expr','expr',3,'p_binary_expr','Mparser.py',149),
  ('expr -> expr * expr','expr',3,'p_binary_expr','Mparser.py',150),
  ('expr -> expr / expr','expr',3,'p_binary_expr','Mparser.py',151),
  ('expr -> expr DOTADD expr','expr',3,'p_binary_expr','Mparser.py',152),
  ('expr -> expr DOTSUB expr','expr',3,'p_binary_expr','Mparser.py',153),
  ('expr -> expr DOTMUL expr','expr',3,'p_binary_expr','Mparser.py',154),
  ('expr -> expr DOTDIV expr','expr',3,'p_binary_expr','Mparser.py',155),
  ('expr -> num_expr','expr',1,'p_expr','Mparser.py',160),
  ('expr -> matrix','expr',1,'p_expr','Mparser.py',161),
  ('expr -> matrix_create','expr',1,'p_expr','Mparser.py',162),
  ('expr -> vector','expr',1,'p_expr','Mparser.py',163),
  ('expr -> uminus','expr',1,'p_expr','Mparser.py',164),
  ('expr -> trans','expr',1,'p_expr','Mparser.py',165),
  ('expr -> matrix_element','expr',1,'p_expr','Mparser.py',166),
  ('expr -> vector_element','expr',1,'p_expr','Mparser.py',167),
  ('num_expr -> number','num_expr',1,'p_num_expr','Mparser.py',173),
  ('num_expr -> str','num_expr',1,'p_num_expr','Mparser.py',174),
  ('num_expr -> id','num_expr',1,'p_num_expr','Mparser.py',175),
  ('matrix -> [ vectors ]','matrix',3,'p_matrix','Mparser.py',179),
  ('matrix_create -> ZEROS ( INTNUM )','matrix_create',4,'p_matrix_create','Mparser.py',183),
  ('matrix_create -> ONES ( INTNUM )','matrix_create',4,'p_matrix_create','Mparser.py',184),
  ('matrix_create -> EYE ( INTNUM )','matrix_create',4,'p_matrix_create','Mparser.py',185),
  ('vectors -> vectors , vector','vectors',3,'p_vectors','Mparser.py',191),
  ('vectors -> vector','vectors',1,'p_vectors','Mparser.py',192),
  ('vector -> [ variables ]','vector',3,'p_vector','Mparser.py',196),
  ('variables -> variables , variable','variables',3,'p_variables','Mparser.py',202),
  ('variables -> variable','variables',1,'p_variables','Mparser.py',203),
  ('variable -> number','variable',1,'p_variable','Mparser.py',207),
  ('variable -> id','variable',1,'p_variable','Mparser.py',208),
  ('variable -> element','variable',1,'p_variable','Mparser.py',209),
  ('number -> INTNUM','number',1,'p_number','Mparser.py',213),
  ('number -> FLOAT','number',1,'p_number','Mparser.py',214),
  ('element -> vector_element','element',1,'p_element','Mparser.py',218),
  ('element -> matrix_element','element',1,'p_element','Mparser.py',219),
  ('vector_element -> id [ INTNUM ]','vector_element',4,'p_vector_element','Mparser.py',223),
  ('matrix_element -> id [ INTNUM , INTNUM ]','matrix_element',6,'p_matrix_element','Mparser.py',227),
]
